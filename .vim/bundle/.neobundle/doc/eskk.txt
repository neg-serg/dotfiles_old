*eskk.txt* *eskk* eskk.vim

Author:
  tyru <tyru.exe@gmail.com>
Version: X.Y.Z
License:
NEW BSD LICENSE {{{
  Copyright (c) 2010, tyru
  All rights reserved.

  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

      * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
      * Neither the name of the tyru nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
}}}

==============================================================================
CONTENTS						*eskk-contents*

Introduction		|eskk-introduction|
Interface			|eskk-interface|
  Keymappings		|eskk-keymappings|
  Variables			|eskk-variables|
  Commands			|eskk-commands|
  Functions			|eskk-functions|
Alphabet table		|eskk-alphabet-table|
Modes				|eskk-modes|
Phases				|eskk-phases|
Completion			|eskk-completion|
FAQ					|eskk-faq|
TODO				|eskk-todo|
Changelog			|eskk-changelog|


==============================================================================
INTRODUCTION						*eskk-introduction* {{{

|eskk| aims to provide powerful input method platform in Vim.

We also maintain skk.vim (|skk|, if you have installed).
But we decided to create eskk,
because skk.vim is mostly unmaintainable
due to Vim 6 compatible code.

eskk provides enhanced and extendable platform
such as multibyte text in Vim.

The remarkable features of eskk is:

* Auto-completion with |neocomplcache|
* Improved behavior when a newline inserted
* Change the cursor's color in each |eskk-modes|

}}}
==============================================================================
INTERFACE				*eskk-interface* {{{
------------------------------------------------------------------------------
KEYMAPPINGS					*eskk-keymappings* {{{

<Plug>(eskk:enable) (icl)		*<Plug>(eskk:enable)*
<Plug>(eskk:disable) (icl)		*<Plug>(eskk:disable)*
<Plug>(eskk:toggle) (icl)		*<Plug>(eskk:toggle)*

	Keymappings version of |eskk#enable()|, |eskk#disable()|, |eskk#toggle()|.


<Plug>(eskk:save-dictionary) (n)		*<Plug>(eskk:save-dictionary)*

	Save SKK dictionary if it's modified
	(one or more new words are registered).
	This is keymapping version of
	|:EskkUpdateDictionary|, and |eskk#update_dictionary()|.


Default keymappings				*eskk-default-keymappings*
----------------------
<C-j> => <Plug>(eskk:toggle)   (icl)

}}}
------------------------------------------------------------------------------
VARIABLES					*eskk-variables* {{{


Directory that eskk creates
------------------------------

g:eskk#directory			*g:eskk#directory*
							(Default: "~/.eskk")
	eskk creates many kinds of directories/files
	under this directory.

SKK dicitionary
------------------

g:eskk#dictionary			*g:eskk#dictionary*
							(Default: See below)
	User dictionary's information.

	This variable value is:
		If user defined:
			String: >
				let g:eskk#dictionary = {
				\	'path': {value},
				\	'sorted': 0,
				\	'encoding': 'utf-8',
				\}
<			Dictionary:
				Keep user settings,
				and set default values to missing keys.
		not defined: >
				let g:eskk#dictionary = {
				\	'path': "~/.skk-jisyo",
				\	'sorted': 0,
				\	'encoding': 'utf-8',
				\}
<

g:eskk#large_dictionary		*g:eskk#large_dictionary*
							(Default: See below)
	System dictionary's information.

	This variable value is:
		If user defined:
			String: >
				let g:eskk#large_dictionary = {
				\	'path': {value},
				\	'sorted': 1,
				\	'encoding': 'euc-jp',
				\}
<			Dictionary:
				Keep user settings,
				and set default values to missing keys.
		not defined: >
				let g:eskk#large_dictionary = {
				\	'path': "/usr/local/share/skk/SKK-JISYO.L",
				\	'sorted': 1,
				\	'encoding': 'euc-jp',
				\}

g:eskk#backup_dictionary	*g:eskk#backup_dictionary*
							(Default: g:eskk#dictionary.path . ".BAK")
	Filename used when eskk makes backup of user dictionary.

g:eskk#auto_save_dictionary_at_exit		*g:eskk#auto_save_dictionary_at_exit*
							(Default: 1)
	If true and one or more words are registered in user dictionary,
	Automatically save its modification to |g:eskk#dictionary|
	when Vim exits (|VimLeave|).

g:eskk#dictionary_save_count		*g:eskk#dictionary_save_count*
							(Default: -1)
	If the number of registered words exceed this count,
	eskk writes it to user dictionary.


Some kanji conversion keys, Annotation
-----------------------------------------

g:eskk#select_cand_keys		*g:eskk#select_cand_keys*
							(Default: "asdfjkl")
	Keys to select candidates at |eskk-select-candidates|.
	This value is String consisted of each character of keys.

g:eskk#show_candidates_count	*g:eskk#show_candidates_count*
							(Default: 4)
	At |eskk-henkan-select-phase|,
	If the number user typed the henkan key exceeded
	this number,
	Switch to |eskk-select-candidates|.

g:eskk#kata_convert_to_hira_at_henkan	*g:eskk#kata_convert_to_hira_at_henkan*
							(Default: 1)
	In |eskk-kata-mode|, Convert katakana to hiragana
	before looking up SKK dictionary.
	Therefore, eskk will find the candidates in SKK dictionary.
	(Because SKK dictionary only contains pairs of hiragana and candidates)

g:eskk#kata_convert_to_hira_at_completion	*g:eskk#kata_convert_to_hira_at_completion*
							(Default: 1)
	Same as |g:eskk#kata_convert_to_hira_at_henkan|,
	But this works at |eskk-completion|.
	See |eskk-completion| for the details.

g:eskk#show_annotation			*g:eskk#show_annotation*
							(Default: 0)
	If true, show annotation at |eskk-select-candidates|.

g:eskk#kakutei_when_unique_candidate	*g:eskk#kakutei_when_unique_candidate*
							(Default: 0)
	If true, at kanji-conversion, and the number of candidates is only one,
	automatically do kakutei.


Keymappings
-----------

g:eskk#no_default_mappings		*g:eskk#no_default_mappings*
							(Default: 0)
	If true, eskk does not prepare any |eskk-default-keymappings| for user.

g:eskk#dont_map_default_if_already_mapped	*g:eskk#dont_map_default_if_already_mapped*
							(Default: 1)
	If true and keys are already mapped, do not map default keys.

g:eskk#mapped_keys				*g:eskk#mapped_keys*
							(Default: eskk#get_default_mapped_keys())
	List of String consisted of |key-notation| (not keycode).
	See |eskk#get_default_mapped_keys()|'s value.
	Note that you have to write "<Bar>" when you write "|".


Mode
-------

g:eskk#initial_mode			*g:eskk#initial_mode*
							(Default: "hira")
	When |eskk#enable()| is called,
	eskk sets this mode to initial value.

g:eskk#statusline_mode_strings	*g:eskk#statusline_mode_strings*
							(Default: See below)
	Current mode's strings at |'statusline'|.
	Statusline string of modes.
	This changes |eskk#statusline()|'s return value.

	Default value is: >
	let g:eskk#statusline_mode_strings = {
	\	'hira': 'あ',
	\	'kata': 'ア',
	\	'ascii': 'aA',
	\	'zenei': 'ａ',
	\	'hankata': 'ｧｱ',
	\	'abbrev': 'aあ'
	\}


Markers
----------

g:eskk#marker_henkan			*g:eskk#marker_henkan*
							(Default: "▽")
	(TODO: doc)

g:eskk#marker_okuri			*g:eskk#marker_okuri*
							(Default: "*")
	(TODO: doc)

g:eskk#marker_henkan_select			*g:eskk#marker_henkan_select*
							(Default: "▼")
	(TODO: doc)

g:eskk#marker_jisyo_touroku			*g:eskk#marker_jisyo_touroku*
							(Default: "?")
	(TODO)


Completion
-------------

g:eskk#enable_completion		*g:eskk#enable_completion*
							(Default: 0)
	If true, enables eskk's completion feature.
	When |neocomplcache| is installed,
	auto-completion feature is enabled.

g:eskk#max_candidates			*g:eskk#max_candidates*
							(Default: 30)
	The max number of candidates displayed on completion menu.

						*g:eskk#start_completion_length*
g:eskk#start_completion_length
							(Default: 3)
	Skip completion until input characters' (not bytes)
	length becomes larger than this value.
	("Skip completion" means, if completion function
	was invoked, always returns an empty list)

g:eskk#register_completed_word			*g:eskk#register_completed_word*
							(デフォルト値: 1)
	If true, register selected word at |eskk-completion|.


Cursor color
---------------

g:eskk#use_color_cursor			*g:eskk#use_color_cursor*
							(Default: 1)
	If true, and eskk is enabled,
	change the cursor's color when switching |eskk-modes|.
	Note: Currently, the feature only works in GUI version.

g:eskk#cursor_color			*g:eskk#cursor_color*
							(Default: See below)
	The cursor's color when eskk is enabled.

	Default value is: >
    " ascii: ivory4:#8b8b83, gray:#bebebe
    " hira: coral4:#8b3e2f, pink:#ffc0cb
    " kata: forestgreen:#228b22, green:#00ff00
    " abbrev: royalblue:#4169e1
    " zenei: gold:#ffd700
    let g:eskk#cursor_color = {
    \   'ascii': ['#8b8b83', '#bebebe'],
    \   'hira': ['#8b3e2f', '#ffc0cb'],
    \   'kata': ['#228b22', '#00ff00'],
    \   'abbrev': '#4169e1',
    \   'zenei': '#ffd700',
    \}
<

Misc.
--------

g:eskk#egg_like_newline			*g:eskk#egg_like_newline*
							(Default: 0)
	(TODO: doc)

g:eskk#egg_like_newline_completion	*g:eskk#egg_like_newline_completion*
							(Default: 0)
	(TODO: doc)

g:eskk#keep_state			*g:eskk#keep_state*
							(Default: 0)
	(TODO: doc)

g:eskk#keep_state_beyond_buffer		*g:eskk#keep_state_beyond_buffer*
							(Default: 0)
	(TODO: doc)

g:eskk#revert_henkan_style			*g:eskk#revert_henkan_style*
							(Default: "okuri")
	(TODO: doc)

g:eskk#delete_implies_kakutei			*g:eskk#delete_implies_kakutei*
							(Default: 0)
	(TODO: doc)

g:eskk#rom_input_style			*g:eskk#rom_input_style*
							(Default: "skk")
	(TODO: doc)

g:eskk#auto_henkan_at_okuri_match			*g:eskk#auto_henkan_at_okuri_match*
							(Default: 1)
	(TODO: doc)

g:eskk#set_undo_point				*g:eskk#set_undo_point*
							(Default: See below)
	(TODO: doc)

	Default value is: >
	let g:eskk#set_undo_point = {
	\	'sticky': 1,
	\	'kakutei': 1,
	\}
<
g:eskk#fix_extra_okuri				*g:eskk#fix_extra_okuri*
							(Default: 1)
	(TODO: doc)

	 >
	▽おくr {henkan-key}
<
	 >
	▽おく*r
<
g:eskk#convert_at_exact_match		*g:eskk#convert_at_exact_match*
							(Default: 0)
	(TODO: doc)





Debugging variables
----------------------

NOTE: These variables is developer use only.
Please note that these variables may change the meaning at any time.


g:eskk#debug			*g:eskk#debug*
						(Default: 0)
	This variable influences the initial values of
	|g:eskk#log_cmdline_level| and |g:eskk#log_file_level|.
	See |g:eskk#log_cmdline_level| and
	|g:eskk#log_file_level| for the details.
	NOTE: This variable is deprecated.
	Use |g:eskk#log_cmdline_level| and
	|g:eskk#log_file_level| instead.

g:eskk#debug_wait_ms	*g:eskk#debug_wait_ms*
						(Default: 0)
	If this variable is greater than 0,
	Do |:sleep| for this value (millisecond).

g:eskk#log_cmdline_level				*g:eskk#log_cmdline_level*
						(Default: 2 if |g:eskk#debug| is true, 0 otherwise)
	Set log level for messages to command-line.
	See below for the meaning.
	0	No output.
	1	Show only error message.
	2	Show error,warning message.
	3	Show error,warning,info message.
	4	Show error,warning,info,debug message.

	Currently, there are no error messages
	to be controlled.
	Because eskk creates an dedicated error log file
	when error occurred.

g:eskk#log_file_level				*g:eskk#log_file_level*
						(Default: 2 if |g:eskk#debug| is true, 0 otherwise)
	Set log level for messages to log file.
	See |g:eskk#log_cmdline_level| for the meaning.

	|eskk| writes log when:
	- CursorHold
	- VimLeavePre
	- each times 20 keys were pressed

}}}
------------------------------------------------------------------------------
COMMANDS					*eskk-commands* {{{

:EskkMap						*:EskkMap*
	This Ex command is internal-use only at this time.
	In near feature, user can be going to define mappings
	when only eskk is enabled.

:EskkForgetRegisteredWords		*:EskkForgetRegisteredWords*
	Forget all registered words.

:EskkUpdateDictionary			*:EskkUpdateDictionary*
	Write registered words to user dictionary.

:EskkFixDictionary[!] [{path}]			*:EskkFixDictionary*
	Fix broken SKK dictionary.
	If [!] was given, do not show the confirmation prompt.
	If {path} is omitted, user dictionary will be fixed.

:EskkReload						*:EskkReload*
	Reload all autoload scripts of eskk.
	e.g.: autoload/eskk.vim, autoload/eskk/table.vim
	Do nothing for autoload scripts which have been not loaded yet.

}}}
------------------------------------------------------------------------------
FUNCTIONS					*eskk-functions* {{{

eskk#enable()			*eskk#enable()*
eskk#disable()			*eskk#disable()*
eskk#toggle()			*eskk#toggle()*
	Enable, Disable, Toggle eskk.
	This works also in |Normal-mode|, and of course |mapmode-ic|.

eskk#is_enabled()			*eskk#is_enabled()*
	Return true if eskk was enabled, false if disabled,

eskk#get_mode()			*eskk#get_mode()*
	Return String of current mode.
	NOTE: This may return invalid value if |eskk#is_enabled()| returns false.

eskk#update_dictionary()		*eskk#update_dictionary()*
	See |:EskkUpdateDictionary|.

eskk#get_default_mapped_keys()			*eskk#get_default_mapped_keys()*
	Return default value of |g:eskk#mapped_keys|.

}}}
}}}
==============================================================================
ALPHABET TABLE					*eskk-alphabet-table* {{{

You can define the own alphabet tables like the following.

>
    autocmd vimrc User eskk-initialize-pre call s:eskk_initial_pre()
    function! s:eskk_initial_pre()
        " User can be allowed to modify
        " eskk global variables (`g:eskk#...`)
        " until `User eskk-initialize-pre` event.
        " So user can do something heavy process here.
        " (I'm a paranoia, eskk#table#new() is not so heavy.
        " But it loads autoload/vice.vim recursively)
        let t = eskk#table#new('rom_to_hira*', 'rom_to_hira')
        call t.add_map('~', '～')
        call t.add_map('zc', '(c)')
        call t.add_map('zr', '?')
        call t.add_map('vh', '?')
        call t.add_map('vj', '?')
        call t.add_map('vk', '?')
        call t.add_map('vl', '?')
        call t.add_map('jva', '?ぁ')
        call t.add_map('jvi', '?ぃ')
        call t.add_map('jvu', '?')
        call t.add_map('jve', '?ぇ')
        call t.add_map('jvo', '?ぉ')
        call t.add_map('z ', '　')
        call eskk#register_mode_table('hira', t)
    endfunction


    " http://subtech.g.hatena.ne.jp/motemen/20110527/1306485690
    " in eskk config.
    " NOTE: This config remains the last character "z"
    " if g:eskk#rom_input_style is not "skk".
    autocmd vimrc User eskk-initialize-pre call s:eskk_initial_pre()
    function! s:eskk_initial_pre() "{{{
        for [orgtable, mode] in [['rom_to_hira', 'hira'], ['rom_to_kata', 'kata']]
            let t = eskk#table#new(orgtable.'*', orgtable)
            call t.add_map('zw', 'w', 'z')
            call eskk#register_mode_table(mode, t)
        endfor
    endfunction "}}}

}}}
==============================================================================
MODES					*eskk-modes* {{{

------------------------------------------------------------------------------
HIRA MODE				*eskk-hira-mode* {{{
}}}
------------------------------------------------------------------------------
KATA MODE				*eskk-kata-mode* {{{
}}}
------------------------------------------------------------------------------
HANKATA MODE				*eskk-hankata-mode* {{{
}}}
------------------------------------------------------------------------------
ABBREV MODE				*eskk-abbrev-mode* {{{
}}}
------------------------------------------------------------------------------
ASCII MODE				*eskk-ascii-mode* {{{
}}}
------------------------------------------------------------------------------
ZENEI MODE				*eskk-zenei-mode* {{{
}}}

}}}
==============================================================================
PHASES					*eskk-phases* {{{

------------------------------------------------------------------------------
NORMAL PHASE			*eskk-normal-phase* {{{
}}}
------------------------------------------------------------------------------
HENKAN PHASE			*eskk-henkan-phase* {{{
}}}
------------------------------------------------------------------------------
OKURI PHASE			*eskk-okuri-phase* {{{
}}}
------------------------------------------------------------------------------
HENKAN SELECT PHASE			*eskk-henkan-select-phase* {{{
}}}

}}}
==============================================================================
COMPLETION				*eskk-completion* {{{

(TODO: doc)

}}}
==============================================================================
FAQ					*eskk-faq* {{{

					*eskk-faq-broken-dict*
Q. My SKK dictionary gets broken! What should I do?
A. |:EskkFixDictionary| may help you.

Or skkdic-expr2 in skktools also may help you:
>
	# Even if just concatenated by cat
	$ cat skk-dict >>skk-dict.new
	# skkdic-expr2 can format like this
	$ skkdic-expr2 skk-dict.new >skk-dict

And, if it was caused by eskk,
I'm pleased if you report the bug.

Q. Can't enable eskk by <C-j>.
A. Maybe other plugins overwrites <C-j> mapping.
":verbose imap <C-j>" shows what plugin has been mapped to <C-j>.

You can choose one from the followings:
1. Uninstall a plugin which overwrote <C-j>.
2. Overwrite <C-j> again by eskk mapping. (like the following code)
>
	autocmd VimEnter * imap <C-j> <Plug>(eskk:toggle)
	autocmd VimEnter * cmap <C-j> <Plug>(eskk:toggle)

}}}
==============================================================================
TODO						*eskk-todo* {{{

See this issue for known problems:
https://github.com/tyru/eskk.vim/issues

Here is the high priority problems:

* Improve documentation

* sometimes eskk vomits unknown errors

* eskk does not learn a new word
https://github.com/tyru/eskk.vim/issues/164

* eskk displays warning message "the mapping already exists"

}}}
==============================================================================
CHANGELOG						*eskk-changelog* {{{

0.0.0:
- 

}}}
==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl:noet:fdm=marker:fen
