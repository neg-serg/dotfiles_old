*vital-prelude.txt*		crucial functions

Maintainer: ujihisa <ujihisa at gmail com>

==============================================================================
CONTENTS				*Vital.Prelude-contents*

INTRODUCTION			|Vital.Prelude-introduction|
INTERFACE			|Vital.Prelude-interface|
  Functions			  |Vital.Prelude-functions|

==============================================================================
INTRODUCTION				*Vital.Prelude-introduction*

*Vital.Prelude* is a special module that you don't have to explicitly import
but can use anywhere. Some Vital modules implicitly depend on Prelude
functions.

==============================================================================
INTERFACE				*Vital.Prelude-interface*
------------------------------------------------------------------------------
FUNCTIONS				*Vital.Prelude-functions*

is_number({value})				*Vital.Prelude.is_number()*
	Returns non-zero if {value} is a |Number|, zero otherwise.
		Examples: >
		:let g:V = vital#of('vital')
		:echo g:V.is_number(123)
<		1 >
		:echo g:V.is_number(1.23)
<		0 >
		:echo g:V.is_number("hoge")
<		0

is_float({value})				*g:V.Prelude.is_float()*
	Returns non-zero if {value} is a |Float|, zero otherwise.
		Examples: >
		:let g:V = vital#of('vital')
		:echo g:V.is_number(123)
<		0 >
		:echo g:V.is_number(1.23)
<		1 >
		:echo g:V.is_number("hoge")
<		0

is_numeric({value})				*g:V.Prelude.is_numeric()*
	Returns non-zero if {value} is a |Number| or a |Float|, zero otherwise.
		Examples: >
		:let g:V = vital#of('vital')
		:echo g:V.is_number(123)
<		1 >
		:echo g:V.is_number(1.23)
<		1 >
		:echo g:V.is_number("hoge")
<		0

is_string({value})				*g:V.Prelude.is_string()*
	Returns non-zero if {value} is a String (|expr-string|), zero otherwise.

is_funcref({value})				*Vital.Prelude.is_funcref()*
	Returns non-zero if {value} is a |Funcref|, zero otherwise.

is_list({value})				*Vital.Prelude.is_list()*
	Returns non-zero if {value} is a |List|, zero otherwise.

is_dict({value})				*Vital.Prelude.is_dict()*
	Returns non-zero if {value} is a |Dictionary|, zero otherwise.

is_windows()					*Vital.Prelude.is_windows()*
	Returns non-zero if Vim is a MS-Windows version, zero otherwise.
	Note that this returns zero if Vim is a Cygwin version.

is_cygwin()					*Vital.Prelude.is_cygwin()*
	Returns non-zero if Vim is a Cygwin version, zero otherwise.

is_mac()					*Vital.Prelude.is_mac()*
	Returns non-zero if Vim is a Macintosh version, zero otherwise.

is_unix()					*Vital.Prelude.is_unix()*
	Returns non-zero if Vim is a MS-Windows version, zero otherwise.
	Note that this returns non-zero if Vim is a Cygwin version.

print_error({message})				*Vital.Prelude.print_error()*
	TODO

smart_execute_command({action}, {word})	*Vital.Prelude.smart_execute_command()*
	TODO

escape_file_searching({str})		*Vital.Prelude.escape_file_searching()*
	TODO

escape_pattern({str})			*Vital.Prelude.escape_pattern()*
	TODO

iconv({expr}, {from}, {to})			*Vital.Prelude.iconv()*
	TODO

getchar(...)					*Vital.Prelude.getchar()*
	TODO

getchar_safe(...)				*Vital.Prelude.getchar_safe()*
	TODO

input_safe(...)					*Vital.Prelude.input_safe()*
	TODO

input_helper({funcname}, {args})		*Vital.Prelude.input_helper()*
	TODO

set_default({var}, {val})			*Vital.Prelude.set_default()*
	TODO

				*Vital.Prelude.set_dictionary_helper()*
set_dictionary_helper({variable}, {keys}, {pattern})
	TODO

				*Vital.Prelude.substitute_path_separator()*
substitute_path_separator({path})
	TODO

path2directory({path})			*Vital.Prelude.path2directory()*
	TODO

				*Vital.Prelude.path2project_directory()*
path2project_directory({path}[, {is_allow_empty}])
	TODO

has_vimproc()					*Vital.Prelude.has_vimproc()*
	Returns non-zero if |vimproc| is installed, zero otherwise.
	You can download the |vimproc| from http://github.com/Shougo/vimproc/.

system({expr} [, {input} [, {timeout}]])	*Vital.Prelude.system()*
	Gets the output of the shell command {expr}.
	This function calls |vimproc#system()| if |has_vimproc()| returns
	non-zero, otherwise |system()|.
	If {timeout} is specified, the command will be killed after {timeout}
	milliseconds.  Note that {timeout} is available only when
	|has_vimproc()| returns non-zero.

get_last_status()			*Vital.Prelude.get_last_status()*
	Returns the result of the last shell command either via |vimproc| or
	not.

==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
