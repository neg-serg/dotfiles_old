*VIntSearch.txt*    Vim Integrated Search
*VIntSearch*

Author:       yssl <http://github.com/yssl>

==============================================================================
Contents                                                 *VIntSearch-contents*

         1. Introduction ......................... |VIntSearch-intro|
         2. Getting Started ...................... |VIntSearch-gettingstarted|
         3. Search Path .......................... |VIntSearch-searchpath|
         4. Search Commands ...................... |VIntSearch-searchcommands|
         5. Stack Commands ....................... |VIntSearch-stackcommands|
         6. Options .............................. |VIntSearch-options|
         7. Key Mappings ......................... |VIntSearch-keymappings|
         8. Changelog ............................ |VIntSearch-changelog|

==============================================================================
1. Introduction                                             *VIntSearch-intro*

|VIntSearch| provides a unified interface for symbols or text search in vim.
It supports two search methods (i.e. ctags and grep) and shows results 
in an integrated way as its name indicates (VIntSearch - Vi Integrated Search).

## Features

- Quickfix-listed results from ctags search

- Easier commands for grep search

- Unified search stack containing your search history by grep and ctags 
  (similar usage to vim's tag stack, but more general one)

- Unified search path for grep and ctags

- Various search commands (for word under the cursor, visually selected text
  , or any text you type)

- Stacking not only search keywords and their position, but also search results 
  in Quickfix

==============================================================================
2. Getting Started                                 *VIntSearch-gettingstarted*

1. You need Exuberant Ctags to fully use this plugin.
   If you don't have it, please install it first.

2. Install this plugin.

3. Open one of your source files with vim.

4. Build a tag file by typing **:VIntSearchBuildTag**. The tag file will be c
   reated in the nearest ancestor dir of the source file that contains 
   a repository dir such as `.git`,
   or in the current working dir if the source file is not managed by any 
   version control system. 
   (Type `:help |g:vintsearch_searchpathmode|` for more detail) 

5. Note that your `set tags=...` setting should have `./tags;,tags;` to use 
   the generated tag file. 
   (The name of the tag file can be changed by setting |g:vintsearch_tagfilename|)

6. Move the cursor to one of the functions or variables. 
   Typing |:VIntSearchListCursorGrep| or |:VIntSearchListCursorCtags| will 
   give search results in Quickfix. 
   Typing |:VIntSearchPrintStack| will show the search stack.

==============================================================================
3. Search Path                                         *VIntSearch-searchpath*

Search path is a directory 1) that is recursively searched by grep,
2) that is the root of the entire source directory tree for which a tag file is generated by  
|:VIntSearchBuildTag|, and 3) where the tag file is located.

*:VIntSearchPrintPath*, *:VSpath*    
Print current search path.

You can check `:help |g:vintsearch_searchpathmode|` to see how the search path is determined.

==============================================================================
4. Search Commands                                 *VIntSearch-searchcommands*

All following commands search the search path recursively.
Search results are updated in Quickfix.

*:VIntSearchListCursorGrep*  
*:VIntSearchListCursorCtags*  
Search for a word under the cursor by grep or ctags.

*:VIntSearchJumpCursorGrep*  
*:VIntSearchJumpCursorCtags*  
Search for a word under the cursor by grep or ctags and jump to the first result.

*:VIntSearchListSelectionGrep*  
*:VIntSearchListSelectionCtags*  
Search for visually selected text by grep or ctags.

*:VIntSearchJumpSelectionGrep*  
*:VIntSearchJumpSelectionCtags*  
Search for visually selected text by grep or ctags and jump to the first result.

*:VIntSearchListTypeGrep* [keyword] [options], *:VSgrep* [keyword] [options]  
Search for [keyword] by grep with [options]. 
(See `man grep` for more details about [options])

*:VIntSearchListTypeCtags* [keyword], *:VSctags* [keyword]  
Search for [keyword] by ctags.

==============================================================================
5. Stack Commands                                   *VIntSearch-stackcommands*

Search stack contains your search history - search keywords you jumped to,
from which file, and search results in Quickfix also.
You can browse your source code more easily by moving forward and backward 
in the search stack.

*:VIntSearchPrintStack*, *:VSstack*  
Print current search stack.

*:VIntSearchMoveBackward*, *:VSbwd*  
Move backward in the search stack.

*:VIntSearchMoveForward*, *:VSfwd*  
Move forward in the search stack.

*:VIntSearchClearStack*, *:VSclear*  
Clear the search stack.

*:VScc*  
*:VScnext*  
*:VScprev*  
Replacement of vim's |:cc|, |:cnext|, and |:cprev| commands.
Jumping to a new QuickFix item should be done ONLY using these commands. 
If not, the jump will not be reflected in VIntSearch's search stack . 
- If you're using any key mapings for |:cnext| or |:cprev|, you can just replace them 
with |:VScnext| and |:VScprev|. 
- When you `Enter` or `Double-click on a Quickfix item, VIntSearch will automatically 
call |:VScc| instead of vim's |:cc| command.

You can disable this VIntSearch's default `Enter` behavior 
using |g:vintsearch_enable_default_quickfix_enter|.

|:VScc| also can be used in other plugins that override vim's |:cc| command,
such as [QFEnter](http://www.vim.org/scripts/script.php?script_id=4778).
(For example, you can register |:VScc| as QFEnter's "cc" command by adding
`let g:qfenter_cc_cmd = 'VScc ##'` in your .vimrc.)

==============================================================================
6. Options                                                *VIntSearch-options*

*g:vintsearch_searchpathmode*
A option to determine the search path.

- rc : Search path is the nearest ancestor dir of the current file that contains 
       a repository dir. 
       If there is no repository dir, search path is the current workig dir.

- rf : Search path is the nearest ancestor dir of the current file that contains 
       a repository dir. 
       If there is no repository dir, search path is the current file dir.

- c : Search path is the current working dir.

Default: >
	let g:vintsearch_searchpathmode = 'rc'
<

*g:vintsearch_tagfilename*
A name of tag file generated by |:VIntSearchBuildTag|.
Default: >
	let g:vintsearch_tagfilename = 'tags'
<

*g:vintsearch_repodirs*
Names of repository directories VIntSearch recognized.
Default: >
	let g:vintsearch_repodirs = ['.git', '.hg', '.svn']
<

*g:vintsearch_search_include_patterns*
File patterns to specified files being searched.
The tag file generated by |:VIntSearchBuildTag| will only contain files 
including these patterns in their paths.
:VIntSearch*Grep commands will search files only including these patterns in
their names.
Default: >
	let g:vintsearch_search_include_patterns =
		\ ['*.c','*.cpp','*.h','*.hpp','*.inl','*.py','*.lua','*.vim','*.js',
		\'*.md','*.txt','*.tex']
<

*g:vintsearch_search_exclude_patterns*
File patterns to specified files not being searched.
The tag file generated by |:VIntSearchBuildTag| will only contain files 
excluding these patterns in their paths.
:VIntSearch*Grep commands will search files only excluding these patterns in
their names and paths.
If a file matches patterns in both *g:vintsearch_search_include_patterns* and
*g:vintsearch_search_exclude_patterns*, it will be excluded from search results.
Default: >
	let g:vintsearch_search_exclude_patterns =
		\ []
<

*g:vintsearch_qfsplitcmd*
Quickfix window positioning commands when showing results from search commands. 
See |opening-window| for more details.
Default: >
	let g:vintsearch_qfsplitcmd = 'botright'
<

*g:vintsearch_enable_default_quickfix_enter*
You can enable / disable VIntSearch's default `Enter` behavior - calling 
|:VScc| when `Enter' or 'Double-click' is invoked in QuickFix window.
This is useful when you use other plugins that also override `Enter' or
'Double-click' behavior of QuickFix, 
such as [QFEnter](http://www.vim.org/scripts/script.php?script_id=4778).
(For example, if you want use `Enter` and `Double-click` behavior of QFEnter,
you have to disable this option.)
Default: >
	let g:vintsearch_enable_default_quickfix_enter = 1
<

==============================================================================
7. Key Mappings                                       *VIntSearch-keymappings*

VIntSearch does not provide default key mappings to keep your key mappings clean.
Instead, I suggest convenient one what I'm using now.
You can add them to your .vimrc and modify them as you want.

```
function! s:nnoreicmap(option, shortcut, command)
    execute 'nnoremap '.a:option.' '.a:shortcut.' '.a:command
    execute 'imap '.a:option.' '.a:shortcut.' <Esc>'.a:shortcut
    execute 'cmap '.a:option.' '.a:shortcut.' <Esc>'.a:shortcut
endfunction

" VIntSearch
call s:nnoreicmap('','<A-b>',':VIntSearchBuildTag<CR><CR>')
call s:nnoreicmap('','<A-]>',':VIntSearchJumpCursorCtags<CR>')
call s:nnoreicmap('','<A-\>',':VIntSearchJumpCursorGrep<CR><CR>')
call s:nnoreicmap('','<A-g>]',':VIntSearchListCursorCtags<CR>')
call s:nnoreicmap('','<A-g>\',':VIntSearchListCursorGrep<CR><CR>')
call s:nnoreicmap('','<A-t>',':VIntSearchMoveBackward<CR>')
call s:nnoreicmap('','<A-T>',':VIntSearchMoveForward<CR>')
vnoremap <A-]> :<C-u>VIntSearchJumpSelectionCtags<CR>
vnoremap <A-\> :<C-u>VIntSearchJumpSelectionGrep<CR><CR>
vnoremap <A-g>] :<C-u>VIntSearchListSelectionCtags<CR>
vnoremap <A-g>\ :<C-u>VIntSearchListSelectionGrep<CR><CR>
call s:nnoreicmap('','<F8>',':VScnext<CR>')
call s:nnoreicmap('','<S-F8>',':VScprev<CR>')
```

I've define the function `s:nnoreicmap()` to map for normal, insert and 
command-line modes simultaneously, 
and installed ![vim-fixkey](https://github.com/drmikehenry/vim-fixkey) plugin 
to use alt-key mappings. 
`<A-T>` means alt+shift+t.

==============================================================================
8. Changelog                                            *VIntSearch-changelog*

1.0.0                       2014/11/02
    - first version
1.0.1                       2015/01/26
    - Change repository directory finding behavior.
1.1.0                       2015/01/31
    - Add DefaultQuickFixEnter behavior - doesn't need external plugins like QFEnter any more
    - New file pattern options to specify input source files for both ctags and grep commands
    - Exception handling: Catch E553 error of VScnext & VScprev  
