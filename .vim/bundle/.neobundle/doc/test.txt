*test.txt*  A test wrapper which enables you to run tests at speed of thought

Author: Janko MarohniÄ‡ <https://github.com/janko-m>
License: Same terms as Vim itself (see |license|)

INTRODUCTION                                    *test*

This plugin allows you to:

  * run nearest test (to the cursor)
  * run (current) test file
  * run test suite
  * run last test

It comes with most common test runners already built in, so it knows which
test runner it has to use for the file you're looking at.

Add your preferred mappings to your `.vimrc` file:
>
  nmap <silent> <leader>t :TestNearest<CR>
  nmap <silent> <leader>T :TestFile<CR>
  nmap <silent> <leader>a :TestSuite<CR>
  nmap <silent> <leader>l :TestLast<CR>
<
GENERIC COMMANDS                                *test-generic_commands*

In all commands [args] are forwarded to the underlying test runner.

                                                *test-:TestNearest*
:TestNearest [args]          Run a test nearest to the cursor (some test
                             runners may not support this). If the current
                             file is not a test file, it reruns a previous
                             "nearest test" (if present).

                                                *test-:TestFile*
:TestFile [args]             Run tests for the current file. If the current
                             file is not a test file, it runs tests for a
                             previously "touched" test file (if present).

                                                *test-:TestSuite*
:TestSuite [args]            Run test suite of the current file. If the current
                             file is not a test file, it runs the suite for
                             the last "touched" test file (if present).

                                                *test-:TestLast*
:TestLast                    Run the last test.

                                                *test-:TestVisit*
:TestVisit                   Visit the last run test.

RUNNER COMMANDS                                 *test-runner_commands*

In all commands [args] are forwarded to the underlying test runner.

                                                *test-:RSpec*
:RSpec [args]                Uses the `rspec` command.

                                                *test-:Cucumber*
:Cucumber [args]             Uses the `cucumber` command.

                                                *test-:Minitest*
:Minitest [args]             Uses the `rake` `test` command. All passed options for
                             Minitest will be properly translated into the
                             Rake world, so you needen't worry.

                                                *test-:Mocha*
:Mocha [args]                Uses the `mocha` command.

                                                *test-:Jasmine*
:Jasmine [args]              Uses the `jasmine-node` command.

                                                *test-:Nose*
:Nose [args]                 Uses the `nosetests` command.

                                                *test-:PyTest*
:PyTest [args]               Uses the `py.test` command.

                                                *test-:ExUnit*
:ExUnit [args]               Uses the `mix` `test` command.

                                                *test-:GoTest*
:GoTest [args]               Uses the `go` `test` command.

                                                *test-:FireplaceTest*
:FireplaceTest [args]        Uses `Fireplace.vim` to run test commands, and
                             automatically reloads code.

                             * Without arguments runs all tests.
                             * With argument /foo/ runs all tests matching
                               "foo".
                             * Otherwise accepts a list of filenames (which it
                               translates to namespaces).

                                                *test-:Bats*
:Bats [args]                 Uses the `bats` command.

                                                *test-:VSpec*
:VSpec [args]                Uses the `vim-flavor` `test` command.

                                                *test-:Busted*
:Busted [args]               Uses the `busted` command.

STRATEGIES                                      *test-strategies*

Multiple strategies are supported for running tests.

Basic (default) ~

Runs test commands with `:!`, which switches your Vim to the Terminal.
>
  let g:test#strategy = 'basic'
<
Dispatch.vim ~

Runs test commands with `:Dispatch`. Requires the
[Dispatch.vim](https://github.com/tpope/vim-dispatch) plugin.
>
  let g:test#strategy = 'dispatch'
<
Vimux ~

Runs test commands in a small Tmux pane at the bottom of your Terminal.
Requires the [Vimux](https://github.com/benmills/vimux) plugin (and Tmux).
>
  let g:test#strategy = 'vimux'
<
Tslime.vim ~

Runs test commands in a Tmux pane you specify. Requires the
[Tslime.vim](https://github.com/kikijump/tslime.vim) plugin (and Tmux).
>
  let g:test#strategy = 'tslime'
<
Terminal.app / iTerm.app ~

If you're in MacVim GUI, you can use this strategy to send the test commands
to your Terminal.app/iTerm.app (since executing shell commands inside Vim GUIs
isn't that nice).
>
  let g:test#strategy = 'terminal'
  " or
  let g:test#strategy = 'iterm'
<
CONFIGURATION                                   *test-configuration*

You may find yourself specifying certain options for your test runners in
certain situations. You can configure your prefered options with
>
  let g:test#ruby#minitest#options = '--verbose'
<
Or, if you prefer more granular approach, you can do
>
  let g:test#ruby#rspec#options = {
    \ 'nearest': '--format documentation',
    \ 'file':    '--format documentation',
    \ 'suite':   '--tag ~slow',
  \}
<
If you want to manually configure a test runner's executable, you can do
>
  let g:test#ruby#rspec#executable = 'foreman run rspec'
<
ABOUT                                           *test-about*

You can get the latest version, see the changelog, or report a bug on GitHub:

https://github.com/janko-m/vim-test

CREDITS                                         *test-credits*

Thanks to Gary Bernhardt, the person who invented this kind of testing.
I also want to thank vim-rspec (https://github.com/thoughtbot/vim-rspec), from
which I borrowed GUI support for OS X, and Windows support.
