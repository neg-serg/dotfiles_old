*ColorSchemeEditor.txt* PyGTK interface to :highlight commands

Last changed:   2012-03-21
Maintainer:     Erik Falor <ewfalor@gmail.com>
Version:        1.2.3
License:        Licensed under the same terms as Vim


==============================================================================
1. Contents                                                *ColorSchemeEditor*
                                                  *ColorSchemeEditor-contents*

    1. Contents                        : |ColorSchemeEditor-contents|
    2. QuickStart                      : |ColorSchemeEditor-quickstart|
      2.1 What's New                   : |ColorSchemeEditor-whatsnew|
    3. Installation                    : |ColorSchemeEditor-install|
      3.1 Requirements                 : |ColorSchemeEditor-requirements|
      3.2 Instructions                 : |ColorSchemeEditor-instructions|
    4. Manual                          : |ColorSchemeEditor-manual|
      4.1 Explanation of the controls  : |ColorSchemeEditor-controls|
      4.2 Commands                     : |ColorSchemeEditor-commands|
      4.3 Variables                    : |ColorSchemeEditor-variables|
      4.4 Common Questions             : |ColorSchemeEditor-questions|
    5. Todo                            : |ColorSchemeEditor-todo|
      5.1 Bugs                         : |ColorSchemeEditor-bugs|


==============================================================================
2. QuickStart                                   *ColorSchemeEditor-quickstart*

This plugin provides a GUI tool which simplifies creating/editing Vim
colorscheme files.  It consists of a Vim plugin as well as a Python program,
and utilizes Vim's command server interface |clientserver| for communications.

The goals that I hope to achieve through this plugin are to improve the
quality of existing colorschemes by allowing the authors the freedom to create
colorschemes in a natural WYSIWYG fashion.  Immediate visual feedback lets the
author quickly assess the effects of their changes, and allows them to easily
choose just the right color for a highlight element.  By displaying all of the
"preferred" highlight groups in a treeview, colorscheme authors can ensure
that all of the important highlights have been changed to fit in with the
overall scheme.  Users of colorschemes can use this plugin to tweak their
favorite colorschemes more to their liking.

Colorschemes generated with this plugin are backwards-compatible with earlier
versions of Gvim that do not use such highlight groups as CursorLine or Pmenu.

Your palette of custom colors is saved in the colorscheme file, so that your
choices persist between editing sessions.  This helps you maintain
a consistent look-and-feel while you are in the process of creating the
colorscheme.  Other metadata related to the colorscheme, such as licensing
information and your contact information are accessible from within the editor
as well.

This plugin makes a nice compliment to my earlier work, ColorSchemeMenuMaker.
    http://www.vim.org/scripts/script.php?script_id=2004

If you have already installed ColorSchemeMenuMaker, the menu entry for
ColorSchemeEditor will appear at the bottom of the "ColorSchemes" menu item.
Additionally, you may invoke it via the :ColorSchemeEditor command.

Each instance of the editor is connected to at most one running instance of
Gvim.

------------------------------------------------------------------------------
2.1 What's New                                    *ColorSchemeEditor-whatsnew*

Version 1.2.3
* With the advent of Python 3.0, the PyGTK portion of this plugin doesn't work
  for some users.  If your 'python' executable points to a 3.x interpreter,
  try setting g:CSE_PythonExe to the name of your Python 2.x executable.

Version 1.2.2
* Write colorscheme files with UNIX line endings, even on non-UNIX OSes.

* If the system's vim executable was not compiled with +clientserver feature, 
  fall back to using gvim executable for IPC.

* Save dialog now prompts before overwriting an existing file. 

Version 1.2.1
* Re-arranged code in __init__() so that all methods which may throw
  VimRemoteException are placed together under one try block instead of being
  spread throughout the constructor.

Version 1.2
* Conditionally include SpellBad, SpellCap, SpellLocal, and SpellRare
  highlight groups if spelling feature is enabled.

Version 1.1
* Foreground and background colors are displayed as swatches in the TreeView.

* Foreground and background color combinations for each highlight group are
  analysed for readability.  The color contrast and color difference
  algorithms used are published by the W3C:
    http://www.w3.org/TR/AERT#color-contrast
    http://www.w3.org/TR/WCAG20-GENERAL/G17.html    7:1 contrast ratio
    http://www.w3.org/TR/WCAG20-GENERAL/G18.html    5:1 contrast ratio

  An implementation of the first algorithm:
    http://snook.ca/technical/colour_contrast/colour.html

* Display rgb.txt colors database in an auxiliary window.


==============================================================================
3. Installation                                    *ColorSchemeEditor-install*

------------------------------------------------------------------------------
3.1 Requirements                              *ColorSchemeEditor-requirements*

ColorSchemeEditor requires that your version of Vim is compiled with the |gui|
and |clientserver| features.

The GUI editor is written with Python, with PyGTK and Glade comprising the
graphical interface.

If you want to use this on Un*x systems, make sure you have those three
packages and their dependencies installed.

More specifically, Gentoo users will need at least the following packages:
dev-lang/python x11-libs/gtk+ gnome-base/libglade dev-python/pygtk

Ubuntu users will need at least these packages: libglade2-0, python, python-gtk2, python-glade2

Windows users will need at least the following software packages:
Python       http://www.python.org/download/
PyGTK        http://www.pygtk.org/downloads.html
Pygobject    See above
Pycairo      See above
gladewin32   http://gladewin32.sourceforge.net/modules/news/

------------------------------------------------------------------------------
3.2 Install Instructions                      *ColorSchemeEditor-instructions*

Once the requisite software packages are installed, simply unzip the plugin
package into your ~/.vim (or ~/vimfiles) directory.  The
ColorSchemeEditor.{py,vim,glade} files should all wind up in the plugin
directory.

Any new instances of Gvim will now show the 'ColorSchemes' menu, and are ready
to go.  Within already running instances of Gvim, you may execute
>
    :runtime plugin/ColorSchemeEditor.vim 
<
to load the plugin.

Also, you should run helptags: 
>
    :helptags $HOME/.vim/doc

<
==============================================================================
4. Manual                                           *ColorSchemeEditor-manual*

------------------------------------------------------------------------------
4.1 Explanation of the controls                   *ColorSchemeEditor-controls*

4.1.1 Highlight Groups TreeView                   *ColorSchemeEditor-treeview*
The TreeView displays all highlight groups defined at the time the editor was
launched.  Linked groups are the child nodes.  In a future version
parent/child relationships will be modifiable by dragging a group and dropping
it upon the parent.  You may edit child nodes; they will still appear as
children of their parent until the TreeView is refreshed.

Double-clicking a row selects it, and sets the ColorSelection and checkboxes
to take on the gui attributes for that group.  

When the TreeView is has focus, typing the name of a visible highlight
group will search for it.  This is helpful when you want to find out which
group a linked highlight group inherits from.  Click 'Expand All' before
searching for a child group.

Click the column headings to sort the list. 

The readability column bears some explanation.  The foreground and background
colors assigned to a particular highlight group are evaluated for their mutual
readability.  The result of this calculation is indicated in this column by
a colored cell.

There are three algorithms that may be used.  The active algorithm is selected
from the Readability menu.  These algorithms look at the guifg and guibg
attributes of each highlight group.  If one or both of these are not defined,
the algorithm will look to the guifg and guibg attributes on the Normal group
as that is what is displayed by Gvim.  

For more details, see the W3C webpages describing the algorithms:
    http://www.w3.org/TR/AERT#color-contrast
    http://www.w3.org/TR/WCAG20-GENERAL/G17.html    7:1 contrast ratio
    http://www.w3.org/TR/WCAG20-GENERAL/G18.html    5:1 contrast ratio

4.1.2 ColorSelection                        *ColorSchemeEditor-colorselection*
The top one changes the foreground color of a highlight group, the bottom one
works on the background color.  If you don't want a color, click the 'NONE'
button to reset it to its pristine condition.

The ColorSelections can parse the names of colors known to rgb.txt; you can
type it in to the Color name text entry.  It will be translated to its #RRGGBB
name for the TreeView.  If you need to save it, drag it to the palette.

4.1.3 Connect toolbar button                       *ColorSchemeEditor-connect*
Displays a list of available Gvim instances.  You will be nagged if you
haven't saved your changes, but you can always re-connect to the previous
instance and save it later.

Use this button when you close Vim and leave a ColorSchemeEditor in
a "disconnected" state.

4.1.4 Refresh toolbar button                       *ColorSchemeEditor-refresh*
If you make a change in Vim, the GUI editor won't know about it unless you do
a refresh.  This will blow away your Undo/Redo history.

4.1.5 :set background menu item                 *ColorSchemeEditor-background*
If you're going to tinker with this control, do it before you change anything
else in the colorscheme.  It's helpful when you're starting from scratch, and
all you know is that you want a colorscheme with a black background.

4.1.6 rgb.txt TreeView                             *ColorSchemeEditor-rgb.txt*
Displays the contents of your server's rgb.txt file.  Someday I'd like this to
support a drag-and-drop interface to the ColorSelection controls.

------------------------------------------------------------------------------
4.2 Commands                                      *ColorSchemeEditor-commands*

                                                          *:ColorSchemeEditor*
:ColorSchemeEditor      Opens a new instance of the editor connected to the
                        current instance of Gvim.

------------------------------------------------------------------------------
4.3 Variables                                    *ColorSchemeEditor-variables*

The following variable affect the behavior of this plugin:

                                                               *CSE_DebugMode*
g:CSE_DebugMode
        Launches the GUI editor in debug mode.  This opens a terminal to which
        verbose logging information is redirected.  This only effects editors
        launched afterwards.

                                                               *CSE_PythonExe*
g:CSE_PythonExe
        The PyGTK portion of this plugin doesn't work in Python 3.x.  This
        plugin tries to launch the GUI with the 'python' program.  If you have
        both Python 3.x and 2.7 installed, you can specify the name of your
        2.x interpeter by setting this variable in your .gvimrc.

------------------------------------------------------------------------------
4.4 Common Questions                             *ColorSchemeEditor-questions*

Oh, I don't know.  If you are having any trouble at all, email me.  If you
people ask the same question enough times, I'll put it in here.


==============================================================================
5. Todo                                               *ColorSchemeEditor-todo*

 1.     Put the communication with Vim into a thread && handle asynchronously
 2.     Color-code the values in the listview
 3      Integrate rgb.txt so users can browse a list of named colors.
 4.     Add a tooltip to explain what the different highlight elements are in the TreeView
 5.     Make adding and removing highlight groups undoable
 6.     Setting NONE attribute checkbox does not result in an atomic undo.
 7.     Removing highlight groups from list:
        If it is a preferred/default highlight group, remove from tree and
        send a "hi <group> clear" Otherwise, just remove it from the tree
 8.     Add support for editing cterm highlight groups.

------------------------------------------------------------------------------
5.1 Bugs                                              *ColorSchemeEditor-bugs*

 1.     Using the eye-dropper causes a crash in Win32; PyGTK tries to bail
        out, but fails to secure enough resources for the "unsaved changes"
        nag screen 

 2.     The Gtk ColorSelection widget stores colors as Gtk.Color objects; this
        means that the RGB components are stored in 16 bits.  Even though the
        ColorSelection widget displays colors in 8-bit terms, there doesn't
        seem to be a way for me to get that info out of it.  Since Gvim uses
        8 bits per component, I divide the components by 256 to get them back
        down to 8 bits.  This isn't the same method the widget uses
        internally, and sometimes the color displayed in the widget's "Color
        Name" text box is different from the color sent over to Vim.

 3.     If the undercurl attribute is used on any highlight groups available
        in Vim 6.3 or earlier, you'll get error messages when sourcing the
        colorscheme.  This isn't usually a problem because undercurl is mostly
        used for the spellchecking |spell| highlight groups, which aren't
        sourced if the |v:version| is less than 700.

Please let me know of any problems you experience, or share any suggestions:
Erik Falor <ewfalor@gmail.com>

 vim:set tw=78 ft=help expandtab nofoldenable:
