Please report this error to author.
`:help eskk` to see author's e-mail address.

Thu 23 Jan 2014 01:31:23 AM MSK

--- char ---
char: ''(0)
mode(): n
--- char ---

--- exception ---
exception type: eskk exception
v:exception: eskk: error occurred while :EskkUpdateDictionary: Vim(let):E712: Argument of get() must be a List or Dictionary (at autoload/eskk/commands.vim)
v:throwpoint: function <SNR>125_cmd_update_dictionary..eskk#get_skk_dict..eskk#dictionary#new..<SNR>299_Dictionary_new..<SNR>299_PhysicalDict_new..<SNR>299_PhysicalDict_update_lines..eskk#logger#write_error_log_file, line 12

   function eskk#logger#write_error_log_file(stash, ...)
1      let v_exception = a:0 ? a:1 : v:exception
2   
3      let lines = []
4   
5      call add(lines, "Please report this error to author.")
6      call add(lines, "`:help eskk` to see author's e-mail address.")
7      call add(lines, '')
8      call add(lines, strftime('%c'))
9      call add(lines, '')
10  
11     call add(lines, '--- char ---')
12     let char = get(a:stash, 'char', '')
13     call add(lines, printf('char: %s(%d)', string(char), char2nr(char)))
14     call add(lines, printf('mode(): %s', mode()))
15     call add(lines, '--- char ---')
16  
17     call add(lines, '')
18  
19     call add(lines, '--- exception ---')
20     if v_exception =~# '^eskk:'
21         call add(lines, 'exception type: eskk exception')
22         call add(lines, printf('v:exception: %s', v_exception))
23     else
24         call add(lines, 'exception type: Vim internal error')
25         call add(lines, printf('v:exception: %s', v_exception))
26     endif
27     call add(lines, printf('v:throwpoint: %s', v:throwpoint))
28  
29     call add(lines, '')
30  
31     let arg = {   'snr_funcname': '<SNR>\d\+_\w\+',   'autoload_funcname': '[\w#]\+',   'global_funcname': '[A-Z]\w*',   'lines': lines,}
37     let o = {}
38  
39     function o['a'](arg)
40         let a:arg.stacktrace =   matchstr(v:throwpoint, '\C'.'^function \zs\S\+\ze, ')
42         return a:arg.stacktrace != ''
43     endfunction
44  
45     function o['b'](arg)
46         let a:arg.funcname = get(split(a:arg.stacktrace, '\.\.'), -1, '')
47         return a:arg.funcname != ''
48     endfunction
49  
50     function o['c'](arg)
51         try
52             return exists('*' . a:arg.funcname)
53         catch    " E129: Function name required
54             " but "s:" prefixed function also raises this error.
55             return a:arg.funcname =~# a:arg.snr_funcname ? 1 : 0
56         endtry
57     endfunction
58  
59     function o['d'](arg)
60         let output = eskk#util#redir_english('function ' . a:arg.funcname)
61         let a:arg.lines += split(output, '\n')
62     endfunction
63  
64     for k in sort(keys(o))
65         if !o[k](arg)
66             break
67         endif
68     endfor
69     call add(lines, '--- exception ---')
70  
71     call add(lines, '')
72  
73     call add(lines, '--- preedit ---')
74     if has_key(a:stash, 'preedit')
75         let lines += a:stash.preedit.dump()
76     else
77         let lines += ['(no preedit)']
78     endif
79     call add(lines, '--- preedit ---')
80  
81     call add(lines, '')
82  
83     call add(lines, "--- Vim's :version ---")
84     redir => output
85     silent version
86     redir END
87     let lines += split(output, '\n')
88     call add(lines, "--- Vim's :version ---")
89  
90     call add(lines, '')
91     call add(lines, '')
92  
93     if executable('uname')
94         call add(lines, "--- Operating System ---")
95         let uname = substitute(system('uname -a'), '\n\+$', '', '')
96         call add(lines, printf('"uname -a" = %s', uname))
97         call add(lines, "--- Operating System ---")
98         call add(lines, '')
99     endif
100 
101    call add(lines, '--- feature-list ---')
102    call add(lines, 'gui_running = '.has('gui_running'))
103    call add(lines, 'unix = '.has('unix'))
104    call add(lines, 'mac = '.has('mac'))
105    call add(lines, 'macunix = '.has('macunix'))
106    call add(lines, 'win16 = '.has('win16'))
107    call add(lines, 'win32 = '.has('win32'))
108    call add(lines, 'win64 = '.has('win64'))
109    call add(lines, 'win32unix = '.has('win32unix'))
110    call add(lines, 'win95 = '.has('win95'))
111    call add(lines, 'amiga = '.has('amiga'))
112    call add(lines, 'beos = '.has('beos'))
113    call add(lines, 'dos16 = '.has('dos16'))
114    call add(lines, 'dos32 = '.has('dos32'))
115    call add(lines, 'os2 = '.has('macunix'))
116    call add(lines, 'qnx = '.has('qnx'))
117    call add(lines, 'vms = '.has('vms'))
118    call add(lines, '--- feature-list ---')
119 
120 
121 
122    let log_file = expand(   eskk#util#join_path(       g:eskk#directory,       'log', 'error' . strftime('-%Y-%m-%d-%H%M%S') . '.log'   ))
128    let write_success = 0
129    try
130        call writefile(lines, log_file)
131        let write_success = 1
132    catch
133        for line in lines
134            redraw
135            echomsg line
136        endfor
137        redraw
138        call eskk#logger#warnf("Cannot write to log file '%s'.", log_file)
139    endtry
140 
141    let save_cmdheight = &cmdheight
142    setlocal cmdheight=3
143    try
144        call eskk#logger#warnf(   "Error!! See %s for details.",   (write_success ? string(log_file) : ':messages'))
148    finally
149        let &cmdheight = save_cmdheight
150    endtry
   endfunction
--- exception ---

--- preedit ---
(no preedit)
--- preedit ---

--- Vim's :version ---
VIM - Vi IMproved 7.4 (2013 Aug 10, compiled Jan 21 2014 16:46:11)
Included patches: 1-155
Compiled by Arch Linux
Huge version with GTK2 GUI.  Features included (+) or not (-):
+acl             +comments        +ex_extra        +jumplist        +mouseshape      +path_extra      +signs           +textobjects     +writebackup
+arabic          +conceal         +extra_search    +keymap          +mouse_dec       +perl            +smartindent     +title           +X11
+autocmd         +cryptv          +farsi           +langmap         +mouse_gpm       +persistent_undo -sniff           +toolbar         -xfontset
+balloon_eval    +cscope          +file_in_path    +libcall         -mouse_jsbterm   +postscript      +startuptime     +user_commands   +xim
+browse          +cursorbind      +find_in_path    +linebreak       +mouse_netterm   +printer         +statusline      +vertsplit       +xsmp_interact
++builtin_terms  +cursorshape     +float           +lispindent      +mouse_sgr       +profile         -sun_workshop    +virtualedit     +xterm_clipboard
+byte_offset     +dialog_con_gui  +folding         +listcmds        -mouse_sysmouse  +python          +syntax          +visual          -xterm_save
+cindent         +diff            -footer          +localmap        +mouse_urxvt     -python3         +tag_binary      +visualextra     +xpm
+clientserver    +digraphs        +fork()          +lua             +mouse_xterm     +quickfix        +tag_old_static  +viminfo         
+clipboard       +dnd             +gettext         +menu            +multi_byte      +reltime         -tag_any_white   +vreplace        
+cmdline_compl   -ebcdic          -hangul_input    +mksession       +multi_lang      +rightleft       -tcl             +wildignore      
+cmdline_hist    +emacs_tags      +iconv           +modify_fname    -mzscheme        +ruby            +terminfo        +wildmenu        
+cmdline_info    +eval            +insert_expand   +mouse           +netbeans_intg   +scrollbind      +termresponse    +windows         
   system vimrc file: "$VIM/vimrc"
     user vimrc file: "$HOME/.vimrc"
 2nd user vimrc file: "~/.vim/vimrc"
      user exrc file: "$HOME/.exrc"
  system gvimrc file: "$VIM/gvimrc"
    user gvimrc file: "$HOME/.gvimrc"
2nd user gvimrc file: "~/.vim/gvimrc"
    system menu file: "$VIMRUNTIME/menu.vim"
  fall-back for $VIM: "/usr/share/vim"
Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_GTK  -pthread -I/usr/include/gtk-2.0 -I/usr/lib/gtk-2.0/include -I/usr/include/pango-1.0 -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/libdrm -I/usr/include/libpng16 -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/libpng16 -I/usr/include/pango-1.0 -I/usr/include/harfbuzz -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/freetype2  -D_FORTIFY_SOURCE=2  -march=native -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1      
Linking: gcc   -L. -Wl,-O1,--sort-common,--as-needed,-z,relro -fstack-protector -rdynamic -Wl,-export-dynamic -Wl,-E -Wl,-rpath,/usr/lib/perl5/core_perl/CORE  -Wl,-O1,--sort-common,--as-needed,-z,relro -L/usr/local/lib -Wl,--as-needed -o vim   -lgtk-x11-2.0 -lgdk-x11-2.0 -lpangocairo-1.0 -latk-1.0 -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lpangoft2-1.0 -lpango-1.0 -lgobject-2.0 -lglib-2.0 -lfontconfig -lfreetype  -lSM -lICE -lXpm -lXt -lX11 -lXdmcp -lSM -lICE  -lm -lncurses -lelf -lnsl  -lselinux  -lacl -lattr -lgpm -ldl  -L/usr/lib -llua -Wl,-E -Wl,-rpath,/usr/lib/perl5/core_perl/CORE -Wl,-O1,--sort-common,--as-needed,-z,relro -fstack-protector -L/usr/local/lib  -L/usr/lib/perl5/core_perl/CORE -lperl -lnsl -ldl -lm -lcrypt -lutil -lpthread -lc -L/usr/lib/python2.7/config -lpython2.7 -lpthread -ldl -lutil -lm -Xlinker -export-dynamic   -lruby -lpthread -lrt -ldl -lcrypt -lm  -L/usr/lib   
--- Vim's :version ---


--- Operating System ---
"uname -a" = Linux unreal 3.12.8-1-ck #1 SMP PREEMPT Fri Jan 17 14:56:18 EST 2014 x86_64 GNU/Linux
--- Operating System ---

--- feature-list ---
gui_running = 1
unix = 1
mac = 0
macunix = 0
win16 = 0
win32 = 0
win64 = 0
win32unix = 0
win95 = 0
amiga = 0
beos = 0
dos16 = 0
dos32 = 0
os2 = 0
qnx = 0
vms = 0
--- feature-list ---
