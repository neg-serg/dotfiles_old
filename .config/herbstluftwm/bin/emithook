#!/usr/bin/dash
# sdothum - 2016 (c) wtfpl
[ $TRACE ] && CHILD="bin/emithook $@" . $PARENT

# herbstluftwm
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂

# ............................................................... Emit hook trap

[ $(pgrep -cx emithook) -gt 1 ] && exit
# touch $DYNAMIC (see toggle focus)
monitor=$(herbstclient attr monitors.focus.index)

herbstclient --idle '(focus_.*|rule)' | while read hook rule winid
do
  # script lock to suppress unnecessary emit hook message processing
  # [ -e $LOCK ] && echo "> (LOCK) $hook $rule $winid" >>$TRACE && continue
  [ -e $LOCK ] && continue
  [ $TRACE ] && echo "> $hook $rule $winid" >>$TRACE

  # lots of manual tuning here to avoid unnecessary draw refreshes in particular,
  # hence, the fullscreen test. also, see query wname whose conky usage is capitalized
  # on to reinitialze monitor layouts after windows are terminated and focus windows

  case $hook in
    focus_changed) ( [ -e $FULLSCREEN ] && draw refresh || draw root ) &
                   draw border &
                   if herbstclient compare monitors.focus.index != $monitor ;then
                     monitor=$(herbstclient attr monitors.focus.index)
                     restore panel &
                   fi ;;

    focus_window) [ -e $DYNAMIC ] && focus window & ;;
    focus_frame ) [ -e $DYNAMIC ] && focus frame & ;;

    rule) case $rule in
            float     ) herbstclient pseudotile toggle & ;;
            max       ) herbstclient set_layout max & ;;
            vertical  ) herbstclient set_layout vertical & ;;
            horizontal) herbstclient set_layout horizontal & ;;
            grid      ) herbstclient set_layout grid & ;;

            fullscreen) if is primary ;then
                          ( [ -e $CONKY ] && draw monitor conky fullscreen ||
                                             draw monitor fullscreen ) &
                        else
                          draw monitor secondary fullscreen &
                        fi ;;

            # experimental only..
            # focus_frame) [ -e $DYNAMIC ] && ( focus frame && bring $winid ) & ;;
            *) [ $TRACE ] && echo "> undefined rule: $hook [$rule] $winid" >>$TRACE ;;
          esac ;;

    *) [ $TRACE ] && echo "> undefined hook: [$hook] $rule $winid" >>$TRACE ;;
  esac
done &

# vim: set ft=sh: #
