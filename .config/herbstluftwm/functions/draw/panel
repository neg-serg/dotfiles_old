# sdothum - 2016 (c) wtfpl
[ $TRACE ] && CHILD="draw/panel $@" . $PARENT

# herbstluftwm
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂

# ................................................................... Draw panel

# Usage: draw panel <fifo>, see restore panel

which lemonbar >/dev/null 2>&1 || exit
fifo=${1#:}
pgrep -f "^lemonbar -d -n lemonbar:$fifo " && exit

# .................................................................. Panel theme

# to set panel location to bottom of screen, export in .xinitrc
[ $PANEL_BOTTOM ] && PANEL_BOTTOM=-b

# panel fonts
# ICON_FONT=FontAwesome
PANEL_FONT='Noto Sans'
UTF8_FONT='DejaVu Sans Mono for Powerline'
PANEL_UNDERLINE=2

# panel symbols, unset candy for numeric desktop tags
CANDY=true
# fontawesome utf icons
# OCCUPIED=$(/usr/bin/printf '\uf111')
# FREE=$(/usr/bin/printf '\uf10c')
# OCCUPIED='■'
# FREE='□'
OCCUPIED='●'
FREE='○'
# tag bar separator (visual spacing)
TAG_PAD='  '
LSEP='      '
RSEP='      '

# panel theme
# alpha channel for panel transparency with compton
DEFAULT_BG='#00000000'
ACTIVE_BG='#762508'
INACTIVE_BG='#074B5F'
DEFAULT_FG="#$(conky color default_color)"
ACTIVE_FG="#$(conky color PANEL)"
ACTIVE_HIDDEN_FG="#$(conky color colorA)"
INACTIVE_FG="#$(conky color color9)"
INACTIVE_HIDDEN_FG="#$(conky color colorI)"
if [ $CANDY ] ;then
  FREE_FG='#4A4B4E'
  FREE_HIDDEN_FG='#7B7E83'
  OCCUPIED_FG=$FREE_FG
  OCCUPIED_HIDDEN_FG=$FREE_HIDDEN_FG
else
  FREE_FG='#7B7E83'
  HIDDEN_FG='#25C0EF'
  OCCUPIED_FG='#E4E5E6'
fi

PANEL_HEIGHT=$(query pheight)

# ..................................................................... Geometry

# calculate panel width (don't span monitors)
monitor=$(herbstclient attr monitors.focus.index)

# geometry has the format: X Y W H
geometry='X:Y:W:H'
for i in $(herbstclient monitor_rect $monitor)
do
  eval monitor${geometry%%:*}=$i
  geometry=${geometry#*:}
done

frame=$(herbstclient attr settings.frame_gap)
window=$(herbstclient attr settings.window_gap)
border=$(herbstclient attr theme.border_width)
# dynamically indent the panel by margin minus panel height
indent=$(( $frame + $window + $border - $PANEL_HEIGHT ))
[ $indent -lt $PANEL_HEIGHT ] && indent=$(( $PANEL_HEIGHT * 3 / 2 ))
panel_width=$(( $monitorW - $frame * 2 - $indent * 2 ))

# compositing shadow tweaking probably only works for flat looks, consider a panel height factor otherwise
displayH=$(xrandr 2>/dev/null |
           grep '\*' |
           sed -r 's/.*x([0-9]*).*/\1/' |
           sed "$(( $(herbstclient attr monitors.focus.index) + 1 ))q;d")
if [ $(( $displayH - $monitorH )) -gt $PANEL_HEIGHT ] ;then
  panel_offsetY=$(( ($displayH - $monitorH - $PANEL_HEIGHT) / 2 ))
  [ $PANEL_BOTTOM ] && panel_offsetY=$(( $monitorH + $panel_offsetY ))
else
  [ $PANEL_BOTTOM ] && panel_offsetY=$(( $displayH - $PANEL_HEIGHT )) ||
                       panel_offsetY=$PANEL_HEIGHT
fi

# multihead geometry for secondary primary (left right) orientation
panel_offsetX=$(( $monitorX + $frame + $indent - 1 ))
if is multihead ;then
  if is primary ;then
    secondaryX=$(query display secondary | awk '{ print $1 }')
    panel_offsetX=$(( $panel_offsetX - $secondaryX ))
  fi
# else
#   panel_offsetY=$(( $panel_offsetY + 2 ))
fi

# ................................................................... Tag status

# eye candy tag icons
tag_symbol() {
  [ $visible ] && tag=$OCCUPIED || tag=$FREE
}

desktops() {
  active=$(query tag)
  inactive=$(query tag inactive)
  unset tags
  for i in $(query winids)
  do
    tags="$tags $(herbstclient attr clients.$i.tag)"
  done
  unset desktops
  for i in $TAGS
  do
    if echo $tags | grep -q $i ;then
      echo $tags | egrep -q "^$i| $i" && visible=true || unset visible
      echo $tags | grep -q "'$i" && hidden=true || unset hidden
      [ $CANDY ] && tag_symbol || tag=$i
      if [ $i = "$active" ] ;then
        if [ $CANDY ] ;then
          format="%{B$DEFAULT_BG}"
          [ $visible ] && format="${format}%{F$ACTIVE_FG}"
          [ $hidden ]  && format="${format}%{F$ACTIVE_HIDDEN_FG}"
        else
          format="%{B$ACTIVE_BG}"
          [ $visible ] && format="${format}%{F$OCCUPIED_FG}" ||
                          format="${format}%{F$FREE_FG}"
          [ $hidden ]  && format="${format}${TAG_PAD}%{U$HIDDEN_FG}%{+u}"
        fi
      elif [ $i = "$inactive" ] ;then
        if [ $CANDY ] ;then
          format="%{B$DEFAULT_BG}"
          [ $visible ] && format="${format}%{F$INACTIVE_FG}"
          [ $hidden ]  && format="${format}%{F$INACTIVE_HIDDEN_FG}"
        else
          format="%{B$INACTIVE_BG}"
          [ $visible ] && format="${format}%{F$OCCUPIED_FG}" ||
                          format="${format}%{F$FREE_FG}"
          [ $hidden ]  && format="${format}${TAG_PAD}%{U$HIDDEN_FG}%{+u}"
        fi
      elif [ $CANDY ] ;then
        format="%{B$DEFAULT_BG}"
        [ $visible ] && format="${format}%{F$OCCUPIED_FG}"
        [ $hidden ]  && format="${format}%{F$OCCUPIED_HIDDEN_FG}"
      else
        format="%{B$DEFAULT_BG}"
        [ $visible ] && format="${format}%{F$OCCUPIED_FG}" ||
                        format="${format}%{F$FREE_FG}"
        [ $hidden ]  && format="${format}${TAG_PAD}%{U$HIDDEN_FG}%{+u}"
      fi
    else
      unset visible
      unset hidden
      [ $CANDY ] && tag=$FREE || tag=$i
      if [ $i = "$active" ] ;then
        [ $CANDY ] && format="%{B$DEFAULT_BG}%{F$ACTIVE_FG}" ||
                      format="%{F$FREE_FG}%{B$ACTIVE_BG}"
      elif [ $i = "$inactive" ] ;then
        [ $CANDY ] && format="%{B$DEFAULT_BG}%{F$INACTIVE_FG}" ||
                      format="%{F$FREE_FG}%{B$INACTIVE_BG}"
      else
        [ $CANDY ] && format="%{B$DEFAULT_BG}%{F$FREE_FG}" ||
                      format="%{F$FREE_FG}%{B$DEFAULT_BG}"
      fi
    fi
    [ $hidden ] && [ -z $CANDY ] && unset leader || leader="${TAG_PAD}"
    desktops="${desktops} ${format}${leader}${tag}%{-u}${TAG_PAD}%{U-}%{B-}%{F-}"
  done
}

# ............................................................... Title and time

# tag desktop description
title() {
  tag=$(herbstclient attr monitors.focus.tag)
  title=$(query tname $tag)
}

# fifo read loop
panel() {
  while read -r line
  do
    case $line in
      S*) system="%{F$DEFAULT_FG}%{B$DEFAULT_BG}${line#?}%{B-}%{F-}" ;;

      T*) title
          count=$(herbstclient attr tags.focus.client_count)
          tickcount=$(herbstclient attr tags.by-name.\'$tag.client_count 2>/dev/null)
          [ $tickcount ] || tickcount=0
          if [ $count -gt 1 ] || [ $tickcount -gt 0 ] ;then
            if [ $count -gt 1 ] && [ $tickcount -gt 0 ] ;then
              title="$title${LSEP}$count${LSEP}%{U$DEFAULT_FG}%{+u}$tickcount%{-u}%{U-}"
            elif [ $count -gt 1 ] ;then
              title="$title${LSEP}$count"
            else
              title="$title${LSEP}%{U$DEFAULT_FG}%{+u}$tickcount%{-u}%{U-}"
            fi
          fi
          unset hiding
          if is fullscreen ;then
            [ $count -gt 1 ] && hiding=true
          elif herbstclient compare tags.by-name.$tag.curframe_wcount gt 1 ;then
            herbstclient layout | grep '\[FOCUS\]'  | grep -q 'max:' && hiding=true
          fi
          if [ $count -gt 0 ] ;then
            if [ "$(query wname)" = "${line#?}" ] ;then
              if [ $hiding ] ;then
                title="$title${LSEP}%{B$DEFAULT_BG}%{F$ACTIVE_FG}%{U$ACTIVE_FG}%{+u}${line#?}%{-u}%{U-}%{F-}%{B-}%{F$DEFAULT_FG}"
              else
                title="$title${LSEP}%{B$DEFAULT_BG}%{F$ACTIVE_FG}${line#?}%{F-}%{B-}%{F$DEFAULT_FG}"
              fi
            else
              if [ $hiding ] ;then
                title="$title${LSEP}%{B$DEFAULT_BG}%{F$ACTIVE_FG}%{U$ACTIVE_FG}%{+u}$(query wname)%{-u}%{U-}%{F$DEFAULT_FG}"
              else
                title="$title${LSEP}%{B$DEFAULT_BG}%{F$ACTIVE_FG}$(query wname)%{F$DEFAULT_FG}"
              fi
              desc=$(asciititle ${line#?})
              [ "$desc" ] && title="$title${LSEP}${desc}%{B-}%{F-}"
            fi
          fi ;;

      *_changed*) desktops ;;
    esac

    # empty desktop does not generate T message
    [ "$title" ] || title
    [ "$desktops" ] || desktops
    printf "%s\n" "%{l}${title}%{c}${desktops} %{r}${system}"
    unset line
  done
}

# .............................................................. FIFO processing

# initialize fifo
[ -e $PANEL_FIFO:$fifo ] && rm -f $PANEL_FIFO:$fifo
mkfifo $PANEL_FIFO:$fifo
# note physical linebreaks for each format specification (to accomodate slow processors, notably arm)
clock -i 1 -sf "S%A${RSEP}%{F$ACTIVE_FG}%-I:%M %P%{F-}${RSEP}%-d %b '%y
" >$PANEL_FIFO:$fifo &
herbstclient --idle '.*_changed' >$PANEL_FIFO:$fifo &
xtitle -sf 'T%s
' >$PANEL_FIFO:$fifo &

is display =3440 && size=8 || size=7

cat $PANEL_FIFO:$fifo \
  | panel \
  | lemonbar -d -n "lemonbar:$fifo" \
             -g ${panel_width}x$PANEL_HEIGHT+$panel_offsetX+$panel_offsetY \
             -u $PANEL_UNDERLINE \
             -f "$PANEL_FONT:size=$size" -f "$UTF8_FONT:size=$size" -F "$DEFAULT_FG" -B "$DEFAULT_BG" &
wait &

# vim: set ft=sh: #
