#!/bin/zsh

# Example for $XDG_CONFIG_HOME/sxiv/exec/key-handler
# Called by sxiv(1) whenever an unbound key combo is used,
# with the key combo as its first argument and the path of the current image
# as its second argument.
# sxiv(1) blocks until this script terminates. It then checks if the image
# has been modified and reloads it.

# The key combo argument has the following form: "[C-][M-][S-]KEY",
# where C/M/S indicate Ctrl/Meta(Alt)/Shift modifier states and KEY is the X
# keysym as listed in /usr/include/X11/keysymdef.h without the "XK_" prefix.


readonly KEY="$1";
readonly TAGFILE="$HOME/.config/sxiv/tags"
readonly TMPFILE="/tmp/sxiv.$$"
readonly TMPFILE2="/tmp/sxiv2.$$"
readonly TMPFILE_HSETROOT="/tmp/sxiv_hset.$$"
readonly rofi_cmd='rofi -dmenu -opacity "90" -lines "10" -columns "1" -font "Pragmata Pro for Powerline 17" -fg "#666666" -bg "#000" -hlfg "#aaaaaa" -hlbg "#194558" -bc "#202020" -bw 2 -location 1 -padding 2 -width 1920'
Z_DATA_FILE="$XDG_DATA_HOME/sxiv_do.data"
LAST_ACTION="$XDG_DATA_HOME/sxiv_do.last"

rotate() {
	degree="$1"
	while read file; do
		case "$(file -b -i "$file")" in
		image/jpeg*) jpegtran -rotate "$degree" -copy all -outfile "$file" "$file" ;;
		*)           mogrify  -rotate "$degree" "$file" ;;
		esac
	done
}

tag_add() {
	>>"$TAGFILE"
	tags=$(dmenu <"$TAGFILE" | tr '\n' ',')
	[ -z "$tags" ] && return
	iptckwed -i -a "$tags"
	echo -n "$tags" | tr ',' '\n' | sort - "$TAGFILE" | uniq >"$TAGFILE.new"
	mv -f "$TAGFILE"{.new,}
}

tag_del() {
	cat >"$TMPFILE"
	tags=$(iptckwed -iql <"$TMPFILE" | cut -f 2 | tr ',' '\n' | sort | uniq | dmenu | tr '\n' ',')
	[ -z "$tags" ] && return
	iptckwed -i -r "$tags" <"$TMPFILE"
	rm -f "$TMPFILE"
}



rename() {
	cat >"$TMPFILE"
    dest=$(printf "%s" "$(basename "$fp")" | eval $(echo $rofi_cmd -p '"[rem] >> "'))
    if [ -n "$dest" ] ; then
        fp=$(cat < "$TMPFILE")
        $cmd "$fp" "$(dirname "$fp")/$dest"
    fi
}

copy() {
	cat >"$TMPFILE"
    if [ -z "$dest" ] ; then
        dest=$(Z -i "$Z_DATA_FILE" | sed 's:^'$HOME':~:' |eval $(echo $rofi_cmd -p '"[cp] >> "')| sed 's:^~:'$HOME':')
    fi
    [ -z "$dest" ] && exit 0
    if [ -d "$dest" ] ; then
        while read line; do
            eval $(echo cp `echo \"${line}\"` $dest)
        done < $TMPFILE
        Z -i "$Z_DATA_FILE" -a "$dest"
        printf "%s\n" "copy "$dest"" > "$LAST_ACTION"
    else
        Z -i "$Z_DATA_FILE" -d "$dest"
    fi
}


move() {
	cat >"$TMPFILE"
    if [ -z "$dest" ] ; then
        dest=$(Z -i "$Z_DATA_FILE" | sed 's:^'$HOME':~:' |eval $(echo $rofi_cmd -p '"[mv] >> "')| sed 's:^~:'$HOME':')
    fi
    [ -z "$dest" ] && exit 0
    if [ -d "$dest" ] ; then
        while read line; do
            eval $(echo mv `echo \"${line}\"` $dest)
        done < $TMPFILE
        Z -i "$Z_DATA_FILE" -a "$dest"
        printf "%s\n" "move "$dest"" > "$LAST_ACTION"
    else
        Z -i "$Z_DATA_FILE" -d "$dest"
    fi
}

delete() {
	cat >"$TMPFILE"
    dest="${HOME}/trash/1st-level/pic"
    [ -z "$dest" ] && exit 0
    if [ -d "$dest" ] ; then
        while read line; do
            eval $(echo mv `echo \"${line}\"` $dest)
        done < $TMPFILE
        printf "%s\n" "move "$dest"" > "$LAST_ACTION"
    fi
}

rep() {
    cat >"$TMPFILE"
    action=($(cat "$LAST_ACTION"))
    dest=${action[1]}
    if [ -d "$dest" ] ; then
        fp=$(cat < "$TMPFILE")
        if [[ ${action[0]} == "copy" ]]; then
            cp "$fp" "$dest"
            Z -i "$Z_DATA_FILE" -a "$dest"
            printf "%s\n" "copy "$dest"" > "$LAST_ACTION"
        fi
        if [[ ${action[0]} == "move" ]]; then
            mv "$fp" "$dest"
            Z -i "$Z_DATA_FILE" -a "$dest"
            printf "%s\n" "move "$dest"" > "$LAST_ACTION"
        fi
    fi
}

copy_name() {
    cat >"$TMPFILE2"
    fp=$(cat < "$TMPFILE2")
    echo $fp|tr -d ' '|xsel -bi
    notify-send "$fp"
    rm -f $TMPFILE2
}

case "$KEY" in
    "C-g") tr '\n' '\0' | xargs -0 gimp & ;;
    "C-comma")  rotate 270 ;;
    "C-period") rotate  90 ;;
    "C-slash")  rotate 180 ;;
    "C-less") rotate -90 ;;
    "C-d") delete ;;
    "C-v") move ;;
    "C-c") copy ;;
    "C-r") rename ;;
    "r")   rep ;;
    "c") copy_name ;;
    "C-1") xargs -n1 hsetroot -full ;;
    "C-2") xargs -n1 hsetroot -fill ;;
    "C-3") xargs -n1 hsetroot -center ;;
    "C-t") tag_add ;;
    "M-T") tag_del ;;
esac
