#!/bin/zsh

source ~/.zsh/03-helpers.zsh
source ${XDG_CONFIG_HOME}/sxiv/exec/rofi_config

opt="$1";

readonly tmpfs="/tmp"
readonly TAGFILE="${XDG_CONFIG_HOME}/sxiv/tags"

readonly tmp_file="${tmpfs}/sxiv.$$"
readonly tmp_file2="${tmpfs}/sxiv2.$$"
readonly tmp_imgur="${tmpfs}/sxiv_imgur.$$"

readonly z_data_file="${XDG_DATA_HOME}/sxiv_do.data"
readonly last_action="${XDG_DATA_HOME}/sxiv_do.last"

readonly rofi_cmd=(rofi -dmenu 
                        -yoffset ${yoffst_} 
                        -opacity ${opacity_} 
                        -lines ${lines_} 
                        -font ${font_} 
                        ${color_} 
                        -bw 2 
                        -location 2 
                        -padding 2 
                        -width ${width_}
                   )

function rotate() {
    local degree="$1"
    while read file; do
        case "$(file -b -i "${file}")" in
        image/jpeg*) jpegtran -rotate "${degree}" -copy all -outfile "${file}" "${file}" ;;
        *)           mogrify  -rotate "${degree}" "${file}" ;;
        esac
    done
}

function tag_add() {
    >>"${TAGFILE}"
    tags=$(dmenu <"${TAGFILE}" | tr '\n' ',')
    [[ -z "${tags}" ]] && return
    iptckwed -i -a "${tags}"
    echo -n "${tags}" | tr ',' '\n' | sort - "${TAGFILE}" | uniq >"${TAGFILE.new}"
    mv -f "${TAGFILE}"{.new,}
}

function tag_del() {
    >>"${tmp_file}"
    tags=$(iptckwed -iql <"${tmp_file}" | cut -f 2 | tr ',' '\n' | sort | uniq | dmenu | tr '\n' ',')
    [[ -z "${tags}" ]] && return
    iptckwed -i -r "${tags}" <"${tmp_file}"
    rm -f "${tmp_file}"
}

function rename() {
    >>"${tmp_file}"
    dest=$(printf "%s" "$(basename "${fp}")" | eval $(echo ${rofi_cmd} -p '"[rem] >> "'))
    [[ -n "${dest}" ]] && fp=$(cat < "${tmp_file}") && mv "${fp}" "$(dirname "$fp")/$dest"
    rm -f "${tmp_file}"
}

function proc() {
    [[ $1 == "copy" ]] && cmd="cp" && cmd_w="copy"
    [[ $1 == "move" ]] && cmd="mv" && cmd_w="move"
    >>"${tmp_file}"
    if [[ -z "${dest}" ]] ; then
        dest=$(${HOME}/bin/Z -i "${z_data_file}" \
      | sed 's:^'${HOME}':~:' \
      | eval $(echo ${rofi_cmd} -p "\"[${cmd}] >> \"") \
      | sed 's:^~:'${HOME}':')
    fi
    [[ -z "${dest}" ]] && exit 0
    if [[ -d "${dest}" ]] ; then
        while read line; do
            file_name="$(resolve_file ${line})"
            eval $(echo ${cmd} $(echo \"${file_name}\") ${dest})
        done < ${tmp_file}
        ${HOME}/bin/Z -i "${z_data_file}" -a "${dest}"
        printf "%s\n" "${cmd_w} "${dest}"" > "${last_action}"
    else
        ${HOME}/bin/Z -i "${z_data_file}" -d "${dest}"
    fi
    rm -f "${tmp_file}"
}

function delete() {
    >>"${tmp_file}"
    local dest="${HOME}/trash/1st-level/pic"
    [[ -z "${dest}" ]] && exit 0
    if [[ -d "${dest}" ]]; then
        while read line; do
            file_name="$(resolve_file ${line})"
            eval $(echo mv $(echo \"${file_name}\") ${dest})
        done < ${tmp_file}
        printf "%s\n" "move "${dest}"" > "${last_action}"
    fi
    rm -f "${tmp_file}"
}

function rep() {
    cat >"${tmp_file}"
    file=($(cat "${last_action}"))
    action=${file[1]} dest=${file[2]}
    if [[ -d "${dest}" ]] ; then
        while read line; do
            file_name="`resolve_file ${line}`"
            echo $file_name
            [[ ${action} == "move" ]] && cmd="mv"
            [[ ${action} == "copy" ]] && cmd="cp"
            eval $(echo $cmd `echo \"${file_name}\"` ${dest})
        done < ${tmp_file}
    fi
    rm -f "${tmp_file}"
}

function copy_name() {
    local st_="<span weight='bold' color='#395573'>"
    local cl_="</span>"
    local bold_="<span weight='bold'>"
    >>"${tmp_file2}"
    local fp=$(cat < "${tmp_file2}")
    local file_name="$(resolve_file ${fp})"
    xsel -bi <<< "${file_name}"
    [[ ${file_name} =~ "^/mnt/home" ]] && file_name="Ï ${file_name#/mnt/home/}"
    notify-send "${st_}[${cl_}${bold_}>>${cl_}${st_}][${cl_}${bold_}${file_name}${cl_}${st_}]${cl_}"
    rm -f ${tmp_file2}
}

function imgur_it() {
    >>"${tmp_imgur}"
    while read f; do
        fp="$(resolve_file ${f})"
        xsel -i <<< $(imgur $(gpg -dq ~/.imgur_pass.gpg) upload "${fp}" |tee -a ~/tmp/imgur_output_)
        xsel -i <<< $(xsel -o|awk '/original/{print $2}')
    done < "${tmp_imgur}"
    rm -f "${tmp_imgur}"
}

case "${opt}" in
    "C-g")      tr '\n' '\0' | xargs -0 gimp & ;;
    "C-comma")  rotate 270 ;;
    "C-period") rotate  90 ;;
    "C-slash")  rotate 180 ;;
    "C-less")   rotate -90 ;;
    "C-d")      delete ;;
    "v")        proc move ;;
    "C-c")      proc copy ;;
    "C-r")      rename ;;
    "r")        rep ;;
    "c")        copy_name ;;
    "C-1")      xargs -n1 hsetroot -center ;;
    "C-2")      xargs -n1 hsetroot -fill ;;
    "C-3")      xargs -n1 hsetroot -full ;;
    "C-4")      xargs -n1 hsetroot -tile ;;
    "C-t")      tag_add ;;
    "C-i")      imgur_it ;;
    "M-T")      tag_del ;;
esac
