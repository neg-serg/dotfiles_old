## 50_highlight-beyond-fill-column.diff by Peter S Galbraith <psg@debian.org>

--- a/elisp/emacs-goodies-el/highlight-beyond-fill-column.el	2003-09-19 19:52:15.000000000 -0400
+++ b/elisp/emacs-goodies-el/highlight-beyond-fill-column.el	2003-09-20 14:26:58.000000000 -0400
@@ -1,15 +1,16 @@
-;;; highlight-beyond-fill-column.el --- font-lock-add-keywords aid for Emacs
+;;; highlight-beyond-fill-column.el --- fontify beyond the fill-column.
 
 ;; Copyright (C) 1985, 1986, 1987, 1992 Free Software Foundation, Inc.
+;; Copyright (C) 2003 Peter S Galbraith <psg@debian.org>
 
 ;; Author: Sandip Chitale (sandip.chitale@blazesoft.com)
 ;; Keywords: programming decipline convenience
 
 ;; Keywords:
 ;; Time-stamp: Aug 23 2001  8:56 PM Pacific Daylight Time
-;; Version: 1.1
+;; Version: 1.2
 
-;; This file is *NOT* (yet?) part of GNU Emacs.
+;; This file is not part of GNU Emacs.
 
 ;; This program is free software; you can redistribute it and/or modify
 ;; it under the terms of the GNU General Public License as published by
@@ -26,10 +27,11 @@
 ;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 ;; Boston, MA 02111-1307, USA.
 
-;; Commentary:
-
-;; This defines a function that can be used by `font-lock-add-keywords' to find the columns
-;; that are beyond `fill-column'.
+;;; Commentary:
+;; 
+;; This defines a function that can be used by `font-lock-add-keywords' to
+;; find the columns that are beyond `fill-column'.  It does not currently
+;; work in XEmacs because it lacks the funcyom `font-lock-add-keywords'.
 ;;
 ;; Installation:
 ;; Put the following in your .emacs
@@ -38,88 +40,70 @@
 ;;
 ;; Example usage:
 ;;
-;; Customize the `highlight-beyond-fill-column-in-modes' variable to
-;; setup the list of modes in which to highlight-beyond-fill-column
+;;   Enable it on a buffer using `M-x highlight-beyond-fill-column.
+;;   You may use that command in a hook (e.g. text-mode-hook)
 ;;
-;; Customize the `highlight-beyond-fill-column-face' variable to
-;; to setup the face used for highlight-beyond-fill-column
+;;   Customize the `highlight-beyond-fill-column-face' variable to
+;;   to setup the face used for highlight-beyond-fill-column
 ;;
 ;; Acknowledgement:
 ;;
 ;; This is based on initial code provided by Jim Janney (jjanney@xmission.com)
-;;
+
+;;; History:
+;; 
+;; V1.2 2003-09-12 by Peter S Galbraith <psg@debian.org>
+;; - Made checkdoc clean and fixed indentation and parentheses placement.
+;; - Added defgroup; used defface.
+;; - Removed `highlight-beyond-fill-column-in-modes' since it didn't work
+;;   anymore.
+;; - Created `highlight-beyond-fill-column' to use on a single buffer or as
+;;   a hook.
 
 ;;; Code:
-(defcustom highlight-beyond-fill-column-in-modes nil
-  "The list of modes in which to highlight-beyond-fill-column."
-  :group 'fill
-  :type  '(repeat string)
-  )
+(defgroup highlight-beyond-fill-column nil
+  "Fontify beyond the fill-column."
+  :group 'fill)
 
-(defcustom highlight-beyond-fill-column-face 'underline
-  "The face to use with highlight-beyond-fill-column."
-  :group 'fill
-  :type  'face
-  )
+(defface highlight-beyond-fill-column-face
+  '((t (:underline t)))
+  "Face used to highlight beyond the fill-column."
+  :group 'highlight-current-line)
 
-(defun find-after-fill-column (limit)
-  "A function that can be used by `font-lock-add-keywords' to find columns that are
-beyond the `fill-column'."
-  (let (
- ; remember the point
- (original-point (point))
- )
-    ; if already past the fill column start on next line
+(defun highlight-beyond-fill-column-lock (limit)
+  "Function for font-lock to highlight beyond the `fill-column' until LIMIT."
+  (let ((original-point (point)))       ;; remember the point
+    ;; if already past the fill column start on next line
     (if (> (current-column) fill-column)
- (forward-line 1)
-      )
-    (while (and (< (point) limit)                                     ; still within limit
-                    (or (< (move-to-column fill-column) fill-column)  ; the line has less than `fill-column' columns
-                        (= (point) (line-end-position))               ; end of line
-   )
-      )
-      ; goto next line
-      (forward-line 1)
-      )
+        (forward-line 1))
+    (while (and (< (point) limit)       ; still within limit
+                ;; the line has less than `fill-column' columns
+                (or (< (move-to-column fill-column) fill-column)
+                    (= (point) (line-end-position)))) ; end of line
+      ;; goto next line
+      (forward-line 1))
 
-    (if (>= (point) limit)                                            ; beyond limit
- (progn
-   (goto-char original-point)                                  ; restore point
-   nil                                                         ; return nil
-   )
-      (set-match-data (list (point-marker)                            ; set match data
-       (progn
-         (end-of-line)
-         (forward-char)                          ; this gives the highlight till the end of the window
-         (point-marker)
-         )
-       )
-        )
-      t)                                                              ; return t indicating that the match data was set
-    )
-  )
+    (if (>= (point) limit)              ; beyond limit
+        (progn
+          (goto-char original-point)    ; restore point
+          nil)                          ; return nil
 
-(defun init-highlight-beyond-fill-column ()
-  ""
-  (let (
- (modelist highlight-beyond-fill-column-in-modes)
- mode
- )
-    (while modelist
-      (setq mode (intern (car modelist)))
-      (if (and mode
-        (functionp mode))
-   (font-lock-add-keywords mode
-      '(
-        (find-after-fill-column 0 highlight-beyond-fill-column-face prepend)
-        )
-      )
- )
-      (setq modelist (cdr modelist))
-      )
-    )
-  )
+      (set-match-data (list (point-marker) ; set match data
+                            (progn
+                              (end-of-line)
+                              (point-marker))))
+      ;; return t indicating that the match data was set
+      t)))
 
-(add-hook 'after-init-hook 'init-highlight-beyond-fill-column)
+;;;###autoload
+(defun highlight-beyond-fill-column ()
+  "Setup this buffer to highlight beyond the `fill-column'."
+  (interactive)
+  (font-lock-add-keywords
+   nil
+   '((highlight-beyond-fill-column-lock 0 'highlight-beyond-fill-column-face
+                                        prepend))))
 
 (provide 'highlight-beyond-fill-column)
+
+;;; highlight-beyond-fill-column.el ends here
