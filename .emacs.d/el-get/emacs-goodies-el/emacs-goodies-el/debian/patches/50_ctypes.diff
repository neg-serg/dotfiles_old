## 50_ctypes.diff by Peter S Galbraith <psg@debian.org>

--- a/elisp/emacs-goodies-el/ctypes.el
+++ b/elisp/emacs-goodies-el/ctypes.el
@@ -4,9 +4,9 @@
 
 ;; Author: Anders Lindgren <andersl@andersl.com>
 ;; Maintainer: Anders Lindgren <andersl@andersl.com>
-;; Version: 1.3.1
+;; Version: 1.4 by Peter S Galbraith
 ;; Created: 1997-03-16
-;; Date: 1999-06-23
+;; Date: 2003-11-10
 
 ;; CTypes is free software; you can redistribute it and/or modify
 ;; it under the terms of the GNU General Public License as published by
@@ -228,14 +228,26 @@
 
 ;;}}}
 
+;;; History:
+;;
+;; 1.3.1 is from http://www.juliocastillo.com/emacs/site-lisp/ctypes.el
+;;
+;; 1.4  Peter S Galbraith <psg@debian.org>
+;;  I can't find the author, so did a few changes myself.
+;;  - minor checkdoc changes (it still lists 43 documentation errors).
+;;  - custom support.
+;;  - add defcustom `ctypes-install' for easier setup in Debian package
+;;    emacs-goodies-el.
+
 ;;; Code:
 
 ;;{{{ Dependencies
 
-;; The only reason to load font-lock is to determinate the font-lock
+;; The only reason to load font-lock is to determine the font-lock
 ;; version we are using.
 
 (require 'font-lock)
+(require 'cc-mode)
 
 (eval-when-compile
   (require 'cl))
@@ -243,19 +255,38 @@
 ;;}}}
 ;;{{{ Variables
 
-(defvar ctypes-file-name "~/.ctypes"
-  "*Default name of file to read types from.
+(defgroup ctypes nil
+  "Enhanced Font lock support for custom defined types."
+  :group 'programming)
+
+(defcustom ctypes-install nil
+  "*Whether to load this file at macs startup.
+Setting this variable will load the file to install the 'find-file-hooks
+and 'kill-emacs-hook hooks.  The effect is the same as adding
+ (require 'ctypes)
+in your Emacs initilization file.
+The file ctypes.el must be in the Emacs load-path when the customization
+code is run in .emacs otherwise Emacs will not find it and will yield an
+error."
+  :type 'boolean
+  :require 'ctypes
+  :group 'ctypes)
 
+(defcustom ctypes-file-name "~/.ctypes"
+  "*Default name of file to read types from.
 When `ctypes-read-file' and `ctypes-write-file' are called interactively
-the directory part of the file name is ignored.")
-
+the directory part of the file name is ignored."
+  :type 'file
+  :group 'ctypes)
 
-(defvar ctypes-write-types-at-exit nil
+(defcustom ctypes-write-types-at-exit nil
   "*When non-nil types are saved to file when Emacs exits.
-
-When this variable be 'ask, the user is prompted before the
-types are saved.")
-
+When this variable be 'ask, the user is prompted before the types are saved."
+  :type '(choice
+          (const :tag "t; save to file when Emacs exits" t)
+          (const :tag "nil; do not save to file when Emacs exits" nil)
+          (const :tag "ask; prompt before saving" ask))
+  :group 'ctypes)
 
 (defvar ctypes-mode-descriptor
   (if (boundp 'c-font-lock-extra-types)
@@ -300,13 +331,13 @@
 when the function is called.")
 
 
-(defvar ctypes-dir-read-file nil
-  "*Variable determinating which files `ctypes-dir' should read.
+(defcustom ctypes-dir-read-file nil
+  "*Variable determining which files `ctypes-dir' should read.
 
-When search for types in a large number of files it is difficult
-to determine which files to parse.  Should to few be opened, we
-can miss some types.  The opposite, to open to many be opened,
-the parse process could take much longer than needed.
+When searching for types in a large number of files it is difficult to
+determine which files to parse.  Some types can be missed should too few
+file be opened, and the parse process could take much longer than needed
+with too many files.
 
 The default behavior, when `ctypes-dir-read-file' is nil, is to look
 at the extension of the files found.  Should it match a major mode in
@@ -331,11 +362,29 @@
     (setq ctypes-dir-read-file \"\\\\.cplusplus\\\\'\")
 
 However, the files would still need a -*- C++ -*- header line
-to be parsed as C++ files.")
-
+to be parsed as C++ files."
+  :type '(choice (const :tag "nil; fast approach." nil)
+                 (const :tag "t; read all non-backup files" t)
+                 (regexp :tag "regexp to match files"))
+  :group 'ctypes)
+
+(defcustom ctypes-dir-backup-files nil
+  "*Non-nil means that `ctypes-dir' should parse backup files."
+  :type 'boolean
+  :group 'ctypes)
+
+(defcustom ctypes-auto-parse-mode-hook nil
+  "*List of functions to run when `ctypes-auto-parse-mode' is activated."
+  :type 'hook
+  :group 'ctypes)
+
+(defcustom ctypes-load-hook nil
+  "*List of functions to run when `ctypes' is loaded."
+  :type 'hook
+  :group 'ctypes)
 
-(defvar ctypes-dir-backup-files nil
-  "*Non-nil means that `ctypes-dir' should parse backup files.")
+(defvar ctypes-saved-p t
+  "Nil when types not saved to file.")
 
 (defvar ctypes-auto-parse-mode nil
   "Non-nil when the minor mode `ctypes-auto-parse-mode' is enabled.
@@ -346,18 +395,6 @@
 To start the mode call the function `ctypes-auto-parse-mode', do not
 set this variable explicitly.")
 
-
-(defvar ctypes-auto-parse-mode-hook nil
-  "*List of functions to run when `ctypes-auto-parse-mode' is activated.")
-
-(defvar ctypes-load-hook nil
-  "*List of functions to run when `ctypes' is loaded.")
-
-
-(defvar ctypes-saved-p t
-  "Nil when types not saved to file.")
-
-
 (defvar ctypes-repetitive-type-regexp
   (concat "\\<\\(short\\|int\\|long\\|float\\|"
           "double\\|char\\|\\(un\\)?signed\\|const\\)\\>")
@@ -387,7 +424,7 @@
 When preceded by C-u the display is not updated.
 
 Return non-nil if the type was not known before."
-  (interactive 
+  (interactive
    (list
     (let* ((default (ctypes-get-type-under-point))
            (prompt (if default
@@ -400,7 +437,7 @@
       (error "Can't define \"\" as a type"))
   (or mode
       (setq mode major-mode))
-  (and type 
+  (and type
        (> (length type) 0)
        (let ((added (ctypes-add-types mode (list type))))
          (ctypes-perform-action mode added delay-action)
@@ -552,7 +589,7 @@
 When preceded by C-u the display is not updated.
 
 Return non-nil if type is removed."
-  (interactive 
+  (interactive
    (list
     (let* ((default (ctypes-get-type-under-point))
            (prompt (if default
@@ -828,7 +865,7 @@
 ;;{{{ Edit
 
 (defvar ctypes-edit-map nil
-  "Keymap used in ctypes-edit mode.")
+  "Keymap used in `ctypes-edit' mode.")
 (if ctypes-edit-map
     nil
   (setq ctypes-edit-map (make-sparse-keymap))
@@ -1087,7 +1124,7 @@
 
 
 (defun ctypes-subset (type-list1 type-list2)
-  "Non-nil if type-list1 is included in type-list2."
+  "Non-nil if TYPE-LIST1 is included in TYPE-LIST2."
   (let ((included t))
     (while (and included type-list1)
       (if (not (member (car type-list1) type-list2))
@@ -1127,7 +1164,7 @@
 
 The action is performed immediately for major modes in MODES, and for
 major modes that inherits types from modes in MODES, when
-`delay-action' is nil, and either changed-p is non-nil or the modes
+`delay-action' is nil, and either CHANGED-P is non-nil or the modes
 previously have been marked for delayed action.
 
 Should DELAY-ACTION be non-nil, the actions are not performed
@@ -1189,7 +1226,7 @@
 
 
 (defun ctypes-perform-delayed-action ()
-  "Perform the action (normally update the display)"
+  "Perform the action (normally update the display)."
   (ctypes-perform-action ctypes-delayed-action-list nil nil))
 
 ;;}}}
@@ -1243,7 +1280,7 @@
     (set (make-local-variable 'parse-sexp-ignore-comments) t)
     (unwind-protect
         (let ((lst '()))
-          (while (re-search-forward 
+          (while (re-search-forward
                   "^\\(\\(typedef\\)\\|class\\|struct\\|enum\\)\\>" nil t)
             (condition-case ()
                 (if (match-beginning 2)
@@ -1494,15 +1531,15 @@
                        (forward-char -1)
                      (goto-char end))
                    (skip-chars-backward " \t")
-                   (setq modes 
-                         (cons (intern 
-                                (concat 
-                                 (downcase 
+                   (setq modes
+                         (cons (intern
+                                (concat
+                                 (downcase
                                   (buffer-substring beg (point))) "-mode"))
                                modes)))
                ;; Simple -*-MODE-*- case.
-               (setq modes 
-                     (cons (intern 
+               (setq modes
+                     (cons (intern
                             (concat (downcase (buffer-substring beg end))
                                                  "-mode"))
                                  modes))))))
@@ -1559,7 +1596,7 @@
 
 
 (defun ctypes-string-to-mode (mode)
-  "Convert a mode name, entered by the user, to a mode symbol.
+  "Convert a MODE name, entered by the user, to a mode symbol.
 
 Example:
     (ctypes-string-to-mode \"C++\")  =>  c++-mode"
@@ -1659,7 +1696,7 @@
           ;; Fontify each declaration item.
           (list 'font-lock-match-c++-style-declaration-item-and-skip-to-next
             ;; Start with point after all type specifiers.
-            (list 'goto-char 
+            (list 'goto-char
                   (list 'or (list 'match-beginning
                                   (+ 2 (regexp-opt-depth regexp)))
                         '(match-end 1)))
@@ -1682,7 +1719,7 @@
               ((= number 2)
                (setq keywords keyword-2))
               (t
-               (error "Incorrect entry in rule.  Found `%s', expected 1 or 2."
+               (error "Incorrect entry in rule.  Found `%s', expected 1 or 2"
                       number)))
         (if append-p
             (set var (append (symbol-value var) (list keywords)))
@@ -1730,13 +1767,11 @@
 
 ;;}}}
 
-;; The End
-
+;; Install ourself
 (add-hook 'find-file-hooks 'ctypes-find-file-hook)
 (add-hook 'kill-emacs-hook 'ctypes-kill-emacs-hook)
 
-(provide 'ctypes)
-
 (run-hooks 'ctypes-load-hook)
+(provide 'ctypes)
 
-;; ctypes.el ends here.
+;;; ctypes.el ends here
