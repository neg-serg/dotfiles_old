#!/usr/bin/perl
use strict;
my  $APP     = 'with';
our $VERSION = '0.122';
use feature 'say';

use Carp();
use Getopt::Long();
use File::Find::Rule();
use Pod::Usage();

use File::Copy qw(cp mv);
#use File::LsColor(); qw(ls_color);

use Data::Dumper();

{
  package Data::Dumper;
  no strict 'vars';
  $Terse = $Indent = $Useqq = $Deparse = $Sortkeys = 1;
  $Quotekeys = 0;
}

if(!@ARGV) {
  say "$APP v$VERSION\n";
  Pod::Usage::pod2usage(verbose => 1);
  exit;
}



my $opt;
#$opt->{pattern} = '(?:1080|720).*\.(?:mkv)$';
$opt->{pattern} = '.*';
$opt->{do}      = sub { say "'$_'" };
$opt->{depth}   = 10;

Getopt::Long::GetOptions(
  'pattern:s' => \$opt->{pattern},
  'do:s'      => sub { shift; $opt->{do} = eval " sub { for(\@_) { @_ } } " },
  'mplayer:s' => sub { $opt->{do} = sub { system("mplayer", @_) } },
  'depth:i'   => \$opt->{depth},

  'h|help'      => sub { Pod::Usage::pod2usage(verbose => 1); exit; },
  'm|man'       => sub { Pod::Usage::pod2usage(verbose => 2); exit; },
  'v|version'   => sub { say "$APP v$VERSION" and exit; },
);

say Data::Dumper::Dumper $opt->{do} if $ENV{DEBUG};

$opt->{pattern} = "(?i)$opt->{pattern}";
$opt->{dir}     = @ARGV ? [ @ARGV ] : ['.'],

walk($opt->{dir}, $opt->{do});

sub walk {
  my($dir, $do) = @_;
  if(ref($do) ne 'CODE') {
    Carp::croak("Code reference expected\n");
  }
  if(ref($dir) ne 'ARRAY') {
    Carp::croak("Array reference expected\n");
  }

  $do->( File::Find::Rule->name( qr[$opt->{pattern}] )
                         ->maxdepth($opt->{depth})
                         ->file
                         ->in(@{$dir})
  );
  return;
}

__END__

=pod

=head1 NAME

with - execute Perl code on files matching pattern

=head1 SYNOPSIS

  with -pattern PATTERN -do CODE FILES

=head1 DESCRIPTION

B<with> takes a PATTERN, possibly a regular expression, a PATH and a piece of
Perl code that'll be executed on every matching file in turn.

The Perl code will be injected in a C<for(@_) { ... }> block.

    sub {
        use strict 'refs';
        BEGIN {
            $^H{'feature_say'} = q(1);
        }
        foreach $_ (@_) {
          # YOUR CODE INJECTED HERE
        }
    }

C<say()>, C<cp()>, C<mv()> imported for convience.

The C<--depth> flag controls how many directories we'll descend into. The
default is infinite.

=head1 OPTIONS

  -do,    --do        execute <code> for every file
  -p,     --pattern   match files with pattern
  -mp,    --mplayer   play with mplayer
  -de,    --depth     descend at most n levels of directories

  -h,     --help      show the help and exit
  -v,     --version   show version info and exit
  -m,     --man       show the documentation and exit

=head1 EXAMPLES

Make all files matching PATTERN lowercase.

  with -pattern '\.mp3$' -do 'mv($_, lc($_)) and say("$_ moved to " . lc($_))'

Find all music videos by Laleh, in 720p and mkv format. Print the results with
LS_COLORS attributes (Need L<File::LsColor>).

  with -pattern 'laleh.*720.*\.mkv$' -do 'say ls_color($_)' $HOME/Mvids

Find all persistent undo files vim has created and remove them.

  with -pattern '\.un~$' -do 'print "$_ deleted\n" if unlink $_'


=head1 AUTHOR

  Magnus Woldrich
  CPAN ID: WOLDRICH
  magnus@trapd00r.se
  http://japh.se

=head1 CONTRIBUTORS

None required yet.

=head1 COPYRIGHT

Copyright 2011 the B<with> L</AUTHOR> and L</CONTRIBUTORS> as listed above.

=head1 LICENSE

This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

=cut
