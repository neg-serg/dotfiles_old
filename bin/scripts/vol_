#!/bin/zsh

MPV_SOCKET="/tmp/mpv.socket"

main(){
    if [[ $# == 0 ]]; then
        vol_manager
    else
        local inc_=1
        local status_

        local addr_=127.0.0.1 
        local port_=6600

        status_=$(grep 'state: ' <<< \
            $( \
                echo -ne "status\nclose\n" | \
                netcat "${addr_}" "${port_}" \
            ) \
            | awk '{print $2}'
        )
        if [[ ${status_} == "play" ]]; then
            echo -ne "volume "$1"\nclose\n" | \
            netcat "${addr_}" "${port_}"
        else
            mpvc -v "$1"
        fi
    fi
}

# Inspired by z3bra and dkeg
state() {
    amixer get Master | sed -n 's/^.*\[\(o[nf]\+\)]$/\1/p' | uniq
}

vol_manager(){
    local pulse_=true
    local term_class="st"
    if [[ $(xprop -id $(pfw) | grep -ow "${term_class}" | head -1) = "${term_class}"  ]]; then
        pulsemixer
    else
        if [[ ! -e ${pulse_} ]]; then
            st pulsemixer && exit
        else
            st alsamixer -g && exit 
        fi
    fi
}

main "$@"

# inc='1'
# capvol='no'
# maxvol='100'
# tmpfile='/tmp/pasink.tmp'
# autosync='yes'

# active_sink=$(pacmd list-sinks |awk '/* index:/{print $3}')
# limit=$[100 - inc]
# maxlimit=$[maxvol-inc]

# function volUp {
#     getCurVol
#     if [[ ${capvol} == 'yes' ]]; then
#         if [[ ${curVol} -le 100 && ${curVol} -ge ${limit} ]]; then
#             pactl set-sink-volume ${active_sink} -- 100%
#         elif [[ ${curVol} -lt ${limit} ]]; then
#             pactl set-sink-volume ${active_sink} -- +${inc}%
#         fi
#     elif [[ ${curVol} -le ${maxvol} && ${curVol} -ge ${maxlimit} ]]; then
#         pactl set-sink-volume ${active_sink} ${maxvol}%
#     elif [[ ${curVol} -lt ${maxlimit} ]]; then
#         pactl set-sink-volume ${active_sink} +${inc}%
#     fi
#     getCurVol
#     [[ ${autosync} = 'yes' ]] && volSync
# }

# function volDown {
#     pactl set-sink-volume ${active_sink} -${inc}%; getCurVol; [[ ${autosync} = 'yes' ]] && volSync
# }

# function getSinkInputs {
#     inputs=$(pacmd list-sink-inputs |grep -B 4 'sink: '${1}' ' |awk '/index:/{print $2}' >${tmpfile})
#     input_array=$(cat ${tmpfile})
# }

# function volSync {
#     getSinkInputs ${active_sink}
#     getCurVol
#     for each in ${input_array}; pactl set-sink-input-volume ${each} ${curVol}%
# }

# function getCurVol {
#     curVol=$(pacmd list-sinks \
#         |grep -A 15 'index: '${active_sink}'' \
#         |grep 'volume:' \
#         |egrep -v 'base volume:' \
#         |awk -F : '{print $3}' \
#         |grep -o -P '.{0,3}%' \
#         |sed s/.$// |tr -d ' ')
# }

# function volMute {
#     case "$1" in
#         mute) pactl set-sink-mute ${active_sink} 1; curVol=0; status=1; ;;
#         unmute) pactl set-sink-mute ${active_sink} 0; getCurVol; status=0; ;;
#     esac
# }

# function volMuteStatus {
#     curStatus=$(pacmd list-sinks \
#         |grep -A 15 'index: '${active_sink}'' \
#         |awk '/muted/{ print $2}')
# }


# case "$1" in
#     --up) volUp ;;
#     --down) volDown ;;
#     --togmute) volMuteStatus; [[ ${curStatus} == 'yes' ]] && { volMute unmute; exit 0; }; volMute mute ;;
#     --mute) volMute mute ;;
#     --unmute) volMute unmute ;;
#     --sync) volSync ;;
#     *) getCurVol; volMuteStatus; [[ ${curStatus} = 'yes' ]] && { echo " ${curVol}%"; exit 0; }; echo " ${curVol}%" ;;
# esac
