#!/bin/bash
# ==============================================================================
# title			:bashdepends
# description		:Build dependancies script for bash
# author		:Glenn Cady <theemahn@ultimateedition.info>
# date			:01/31/2013
# version		:1.7.1-8
# usage			:builddeps --help
# manual		:man bashdepends
# notes			:See change-log below for further information.
# bash_version		:4.2.8(1)-release
# ==============================================================================
# Change-log: 1.7.1-8: Currently unreleased / unleashed
# ==============================================================================
VERSION="1.7.1-8"
BUILDDATE="01/31/2013"
# set colors so errors etc. stand out.

txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldpur='\e[1;35m' # Purple
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White
unkblk='\e[4;30m' # Black - Underline
undred='\e[4;31m' # Red
undgrn='\e[4;32m' # Green
undylw='\e[4;33m' # Yellow
undblu='\e[4;34m' # Blue
undpur='\e[4;35m' # Purple
undcyn='\e[4;36m' # Cyan
undwht='\e[4;37m' # White
bakblk='\e[40m'   # Black - Background
bakred='\e[41m'   # Red
badgrn='\e[42m'   # Green
bakylw='\e[43m'   # Yellow
bakblu='\e[44m'   # Blue
bakpur='\e[45m'   # Purple
bakcyn='\e[46m'   # Cyan
bakwht='\e[47m'   # White
txtrst='\e[0m'    # Text Reset

#Folder where executed
CURRENT=$PWD

function Chkdeps (){
	# verify a parameter was passed
	if [[ $1 == "" ]];then
		echo -e "${bldred}Please specify a file.${txtrst}"
		exit 0
	fi

	# Filename in case user entered /bin/repomaster for example set to repomaster
	filename=${1##*/}

	# set bash file to process copy to temp
	cp $1 /tmp/
	BFTP="/tmp/"$filename

	# test for bash script existance
	test -s $BFTP || exit 0;
	echo -e "${bldgrn}Please wait this may take a while depending on the size of the script.${txtrst}"

	# roll to temp to begin processing.
	cd /tmp/

	# strip tabs
	sed -i 's/^[ \t]*//' $BFTP

	# strip comments
	sed -e 's/#.*$//' -e '/^$/d' $filename > wip.txt

	# strip echo a builtin
	sed -i '/echo .*/d' wip.txt

	# strip functions
	sed -i '/function .*/d' wip.txt
	sed -i '/}.*/d' wip.txt

	# strip Printf
	sed -i '/printf .*/d' wip.txt

	# strip braces
	cat wip.txt | tr -d "[]" > $filename

	# test for existance of temporary words list in case
	# this tool has been ran before.if so remove file.
	test -e /tmp/words.txt && rm /tmp/words.txt

	# grab commands used in bash file
	for word in $(cat "$BFTP")
	do
		[ -f '$word' -o -f /bin/$word ] && echo $word >> /tmp/words.txt &2>/dev/null
		[ -f '$word' -o -f /usr/bin/$word ] && echo $word >> /tmp/words.txt &2>/dev/null
	done

	cat $BFTP | grep '$(' | cut -d'(' -f2 | sed 's/ .*//g' >> /tmp/words.txt
	cat $BFTP | grep '`' | cut -d'`' -f2 | sed 's/ .*//g' >> /tmp/words.txt
	#strip empty lines
	sed -i '/^$/d' /tmp/words.txt
	#cat $filename | cut -d' ' -f1 >> words.txt
	#intiate array
	array_counter=0
	array_value=0

	#Declare array with all bash builtins
	declare -a Builtins=('alias' 'bg' 'bind' 'break' 'builtin' 'cd' 'command' 'compgen' 'complete' 'continue' 'declare' 'dirs' 'disown' 'echo' 'enable' 'eval' 'exec' 'exit' 'export' 'fc' 'fg' 'getopts' 'hash' 'help' 'history' 'jobs' 'kill' 'let' 'local' 'logout' 'popd' 'printf' 'pushd' 'pwd' 'read' 'readonly' 'return' 'set' 'shift' 'shopt' 'source' 'suspend' 'test' 'times' 'trap' 'type' 'typeset' 'ulimit' 'umask' 'unalias' 'unset' 'wait');

	#Strip references to bash builtin commands
	echo -e "${bldgrn}Stripping bash builtin commands.${txtrst}"
	for number in ${Builtins[@]}
	do
		sed -i "s/${Builtins[$array_counter]}//g" /tmp/words.txt
		array_counter=$(($array_counter + 1))
	done

	#scrap open brackets* from list
	sed -i 's/\[.*//g' /tmp/words.txt

	#scrap empty lines and a few builtins
	sed -i '/^$/d' /tmp/words.txt
	sed -i '/for .*/d' /tmp/words.txt
	sed -i '/from.*/d' /tmp/words.txt
	sed -i "/'/d" /tmp/words.txt

	#Start building dependancy list
	cat /tmp/words.txt | tr " " "\n" | sort | uniq >/tmp/depends.txt

	#Strip #'s
	sed -i '/sh/d' /tmp/depends.txt

	#Strip empty lines
	sed -i '/^$/d' /tmp/depends.txt

	#Initiate header & display results to end user
	echo -e "${bldgrn}Externally called commands:${txtrst}"

	# Check list existance no list no dependancies
	if test -s /tmp/depends.txt
		then
		cat /tmp/depends.txt
	else
		echo -e "${bldred}$1 has no external dependancies.${txtrst}"
		CleanUP
		exit 0
	fi

	#Initate header to display progress in scanning. Make it pretty ;)
	echo -e "${bldgrn}SCANNING FOR NON-ESSENTIAL / ESSENTIAL PACKAGE(S)..."
	printf '%-15s %-30s %-10s %s\n' \
	"COMMAND" "PACKAGE" "PRIORITY" "VERSION"

	#Punch out package database to reference later
	echo -e "${bldwht}________________________________________________________________________________${txtrst}"
	dpkg-query -Wf '${Package}:${Priority}:${Version}\n' | sort -b -k2,2 -k1,1 >/tmp/packages.txt
	test -e /tmp/list.txt && rm /tmp/list.txt

	#Set header for Control file
	cat /tmp/depends.txt | while read FILE
	do
		BINARY=$(which $FILE)
		if [[ $BINARY != "" ]]; then
			POSSIBLE=$(dpkg -S `which $BINARY` | cut -d":" -f1)
			PACKAGEPRIORITY=$(dpkg-query -s $POSSIBLE | grep "Priority:" | cut -d: -f2 | sed 's/ //g')
			PVERSION=$(dpkg-query -s $POSSIBLE | grep "Version:" | cut -d: -f2 | sed 's/ //g')
		else
			exit 0
		fi
		# I have not seen an unknown ever come up please report if you
		# see one and the package involved.
		case $PACKAGEPRIORITY in
			"standard")
			echo -e -n "${bldgrn}";
			printf '%-15s %-30s %-10s %s\n' \
			"$FILE" "$POSSIBLE" "$PACKAGEPRIORITY" "$PVERSION";;
			"required")
			echo -e -n "${bldgrn}";
			printf '%-15s %-30s %-10s %s\n' \
			"$FILE" "$POSSIBLE" "$PACKAGEPRIORITY" "$PVERSION";;
			"important")
			echo -e -n "${bldgrn}";
			printf '%-15s %-30s %-10s %s\n' \
			"$FILE" "$POSSIBLE" "$PACKAGEPRIORITY" "$PVERSION";;
			"optional")
			echo -e -n "${bldred}";
			printf '%-15s %-30s %-10s %s\n' \
			"$FILE" "$POSSIBLE" "$PACKAGEPRIORITY" "$PVERSION";
			echo "$POSSIBLE:$PVERSION" >> list.txt;;
			"extra")
			echo -e -n "${bldred}";
			printf '%-15s %-30s %-10s %s\n' \
			"$FILE" "$POSSIBLE" "$PACKAGEPRIORITY" "$PVERSION";
			echo "$POSSIBLE:$PVERSION" >> list.txt;;
			*)
			echo -e -n "${bldblu}";
			printf '%-15s %-30s %-10s %s\n' \
			"$FILE" "$POSSIBLE" "UNKNOWN" "$PVERSION";;
		esac
	done
	echo -e "${bldwht}Please add all red packages to your control file.${txtrst}"
	GenerateList
}

function GenerateList {
	if test -s list.txt
	then
		echo -n "Depends: "
	else
		echo -e "${bldgrn}No external dependancies.${txtrst}"
		CleanUP
		exit 0
	fi
	NDEPENDS=$(cat list.txt | wc -l)
	cat /tmp/list.txt | while read FILE
	do
		PROCESS=$(($PROCESS + 1))
		DEPEND=$(echo $FILE | cut -d: -f1)
		DVERSION=$(echo $FILE | cut -d: -f2)
		# make sure if is not entered twice on the list for example the 
		# commands "ar" and "as" are both part of binutils. We only want
		# it referenced once.
		if test -s fulllist.txt
		then
			ISTHERE=$(cat fulllist.txt | grep $DEPEND)
			if [[ $ISTHERE == "" ]]; then
				if [[ $NDEPENDS != $PROCESS ]]; then
					OUT=$OUT$DEPEND" (>="$DVERSION"), "
				else
					OUT=$OUT$DEPEND" (>="$DVERSION")"
				fi
			fi
		else
			if [[ $NDEPENDS != $PROCESS ]]; then
				OUT=$OUT$DEPEND" (>="$DVERSION"), "
			else
				OUT=$OUT$DEPEND" (>="$DVERSION")"
			fi
		fi
		# push list out to file bash gets dumb when it leaves a do done
		# loop and I do not feel like writing it to run in a sub shell.
		echo $OUT > fulllist.txt
	done
	cat fulllist.txt
	CleanUP
}

function CleanUP {
	# self explanatory
	test -e /tmp/list.txt && rm /tmp/list.txt
	test -e /tmp/fulllist.txt && rm /tmp/fulllist.txt
	test -e /tmp/words.txt && rm /tmp/words.txt
	test -e /tmp/packages.txt && rm /tmp/packages.txt
	test -e /tmp/wip.txt && rm /tmp/wip.txt
	test -e /tmp/depends.txt && rm /tmp/depends.txt
	test -e $BFTP && rm $BFTP
}

function Version {
	# dump version number and exit
	echo -e "${undwht}bashdepends $VERSION, $BUILDDATE${txtrst}
	==============
	GNU builddeps home page: <http://www.ultimateedition.info/>.
	E-mail bug reports to: <theemahn@ultimateedition.info>.
	Be sure to include the word builddeps somewhere in the Subject: field."
	exit 0
}

function Help() {

	if [[ $1 == "" ]];
		then
		PRAM="ALL"
	else
		PRAM=$1
	fi

echo -e "${undwht}bashdepends $VERSION, $BUILDDATE${txtrst}"

	case $PRAM in
		ALL)
	echo -e "${txtgrn}GNU bashdepends home page: <http://www.ultimateedition.info/>.
E-mail bug reports to: <theemahn@ultimateedition.info>.
Be sure to include the word bashdepends somewhere in the Subject: field.${txtrst}";
echo "
bashdepends is a part of the tm-tools package. Many of the tools are heavy and
are not intended to be ran by the common user. The tools are geared for the
admininstrator. Please see man tmtools for more info.";
echo -e "
${bldgrn}Usage: bashdepends -[-COMMAND] <BASHSCRIPT>${txtrst}
Mandatory arguments to long options are identical for short options.
possible commands...

	-d	--depends	find dependencies for <BASHSCRIPT>
	-h	--help		this help message
	-v	--version	dump version info

${bldgrn}Example: bashdepends mybashscript.sh
${bldgrn}bashdepends --help [COMMAND] for further information.${txtrst}";;
	ALL|d|depends)
	echo -e "
	${bldwht}Usage depends;${txtrst}
	${txtgrn}bashdepends -d <BASHSCRIPT>${txtrst}
	Displays external dependencies on <BASHSCRIPT>.";;
	ALL|v|version)
	echo -e "
	${bldwht}Usage version;${txtrst}
	${txtgrn}bashdepends -v${txtrst}
	Displays bashdepends version number and exits.";;
	ALL|h|help|\?)
	echo -e "
	${bldwht}Useage Help [COMMAND];${txtrst}
	${txtgrn}bashdepends -h [COMMAND]${txtrst}
	Displays this message. For futher information bashdepends help [COMMAND]
	or refer to the manpages.
	man bashdepends"
	echo -e "${txtgrn}"
	echo -e "Example: bashdepends mybashscript.sh"
	echo -e "${txtwht}Will find the build dependancies for mybashscript.sh${txtrst}"
	esac
exit 0
}

#Command switch preprocessor
case "$1" in
	-h|--help|-\?) Help $2; exit 0;;
	-v|--version) Version; exit 0;;
	-d|--depends) Chkdeps $2; exit 0;;
	*) Help; exit 0;;
esac
