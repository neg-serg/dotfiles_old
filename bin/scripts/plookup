#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2011-2012 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'
require 'set'

class Plookup
  attr_reader :options

  def initialize opts = {}
    @options = OpenStruct.new opts
    options.flags ||= Set.new
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Usage: #{File.basename __FILE__} [options] port|string|regexp ...

        Options:
      BANNER

      opt.on '-f', '--file PATH', 'Services file; defaults to:', services.join(' + ') do |arg|
        options.file = arg
      end

      opt.on '-i', '--ignore-case', 'Case-insensitive search' do
        options.flags << Regexp::IGNORECASE
      end

      opt.on '-r', '--regexp', 'Interpret pattern as a Ruby regular expression' do
        options.regexp = true
      end

      opt.on '-u', '--ugly', 'Do not pretty print results' do
        options.ugly = true
      end
    end
  end

  def services
    fs = (options.file ? [options.file] : [
      '/etc/services',
      File.expand_path('../../share/nmap/nmap-services', %x(/bin/sh -c 'command -v nmap').chomp)
    ]).select { |f| File.exists? f }

    raise 'No services files found!' if fs.empty?

    fs
  end

  def flags
    options.flags.inject(0) { |n,f| n|f }
  end

  def grep pattern
    rgx = if options.regexp
      Regexp.new pattern, flags
    elsif pattern =~ /\A\d+\z/
      # Restrict search to port numbers
      Regexp.new '\s%s/\w' % pattern, flags
    else
      # String search
      Regexp.new Regexp.escape(pattern), flags
    end

    services.map { |f| File.readlines f }.flatten.grep rgx
  end

  def pp lines
    lines.map do |line|
      line.gsub! /\t/, ' '
      if m = line.match(%r(\A(.*?)\s+(\d+/.*?)\s*(#.*)))
        '%-16s %-20s %s' % m[1..3]
      elsif m = line.match(%r(\A(.*?)\s+(\d+.*)))
        '%-16s %s' % m[1..2]
      else
        line
      end
    end
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help if args.empty?

    args.each { |arg| puts options.ugly ? grep(arg) : pp(grep arg) }
  end
end

$0 = File.basename(__FILE__) and Plookup.new.run ARGV if $0 == __FILE__
