#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2012-2013 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'ostruct'

class Screencast
  attr_reader :options

  def initialize opts = {}
    @options = OpenStruct.new opts
    options.audio ||= true
    options.rate ||= 25
    options.codec ||= 'libx264'
  end

  def parser
    @parser ||= OptionParser.new nil, 24 do |opt|
      opt.banner = <<-BANNER.gsub /^ +/, ''
        Capture X11 screen data and audio input to file. If argument is a
        directory, a timestamped file is created in that directory instead.
        If no arguments are given, the current directory is used as the
        parameter.

        Usage: #{File.basename __FILE__} [options] [file|dir]

        Options:
      BANNER

      opt.on '-d', '--delay SECONDS', Integer, 'Seconds to wait before recording' do |arg|
        options.delay = arg
      end

      opt.on '-g', '--geometry WxH+X,Y', 'Geometry and offset of capture area' do |arg|
        options.geometry = arg.match(/(\d+)(?:x(\d+)(?:\+(\d+))(?:,(\d+)))/)[1..-1]
      end

      opt.on '-n', '--no-audio', 'Do not record audio' do
        options.audio = false
      end

      opt.on '-r', '--rate FPS', Integer, 'Set capture FPS' do |arg|
        options.rate = arg
      end

      opt.on '-w', '--window', 'Set capture area to interactively chosen window' do
        options.window = true
      end

      opt.on '-W', '--window-id ID', 'Set capture area to given window ID' do |arg|
        options.window = true
        options.window_id = arg
      end

      opt.on '-x', '--dnxhd', 'Use the DNxHD codec' do
        options.codec = 'dnxhd'
      end
    end
  end

  def parse_geometry geometry
    w, h, x, y = geometry
    { :dimensions => "#{w}x#{h}", :offset => "+#{x},#{y}" }
  end

  def get_window_geometry id
    x, y, w, h = (id ? %x(xwininfo -id #{id}) : %x(xwininfo)).match(/
      Absolute\ upper-left\ X:\s*(\d+).*
      Absolute\ upper-left\ Y:\s*(\d+).*
      Width:\s*(\d+).*
      Height:\s*(\d+).*
    /mx)[1..4]
    [w, h, x, y]
  end

  def current_display
    ENV['DISPLAY'] + '.0'
  end

  def current_screen_geometry
    %x(xrandr).match(/current (\d+) x (\d+)/)[1..2].map(&:to_i) + [0, 0]
  end

  def timestamp
    Time.now.strftime '%Y-%m-%d:%H:%M:%S'
  end

  def countdown delay
    if delay > 0
      print 'Starting in '
      delay.times.each { |n| print '%d...' % (delay - n); sleep 1 }
      puts
    end
  end

  def record file, geometry, opts = {}
    dimensions, offset = parse_geometry(geometry).values_at :dimensions, :offset
    display = opts[:display] || ':0.0'

    copts = %W[-y -threads auto]
    copts += %W[-f x11grab -r #{opts[:rate]} -s #{dimensions} -i #{display}#{offset}]
    copts += %W[-f alsa -ac 2 -i pulse] if opts[:audio]

    copts += case opts[:codec]
    when 'libx264'
      %W[
        -vcodec libx264
        -preset ultrafast
        -tune animation
        -crf 0
      ]
    when 'dnxhd'
      # Valid DNxHD profiles:
      # Frame size: 1920x1080p; bitrate: 175Mbps; pixel format: yuv422p10; framerate: 24000/1001
      # Frame size: 1920x1080p; bitrate: 185Mbps; pixel format: yuv422p10; framerate: 25/1
      # Frame size: 1920x1080p; bitrate: 365Mbps; pixel format: yuv422p10; framerate: 50/1
      # Frame size: 1920x1080p; bitrate: 440Mbps; pixel format: yuv422p10; framerate: 60000/1001
      # Frame size: 1920x1080p; bitrate: 115Mbps; pixel format: yuv422p; framerate: 24000/1001
      # Frame size: 1920x1080p; bitrate: 120Mbps; pixel format: yuv422p; framerate: 25/1
      # Frame size: 1920x1080p; bitrate: 145Mbps; pixel format: yuv422p; framerate: 30000/1001
      # Frame size: 1920x1080p; bitrate: 240Mbps; pixel format: yuv422p; framerate: 50/1
      # Frame size: 1920x1080p; bitrate: 290Mbps; pixel format: yuv422p; framerate: 60000/1001
      # Frame size: 1920x1080p; bitrate: 175Mbps; pixel format: yuv422p; framerate: 24000/1001
      # Frame size: 1920x1080p; bitrate: 185Mbps; pixel format: yuv422p; framerate: 25/1
      # Frame size: 1920x1080p; bitrate: 220Mbps; pixel format: yuv422p; framerate: 30000/1001
      # Frame size: 1920x1080p; bitrate: 365Mbps; pixel format: yuv422p; framerate: 50/1
      # Frame size: 1920x1080p; bitrate: 440Mbps; pixel format: yuv422p; framerate: 60000/1001
      # Frame size: 1920x1080i; bitrate: 185Mbps; pixel format: yuv422p10; framerate: 25/1
      # Frame size: 1920x1080i; bitrate: 220Mbps; pixel format: yuv422p10; framerate: 30000/1001
      # Frame size: 1920x1080i; bitrate: 120Mbps; pixel format: yuv422p; framerate: 25/1
      # Frame size: 1920x1080i; bitrate: 145Mbps; pixel format: yuv422p; framerate: 30000/1001
      # Frame size: 1920x1080i; bitrate: 185Mbps; pixel format: yuv422p; framerate: 25/1
      # Frame size: 1920x1080i; bitrate: 220Mbps; pixel format: yuv422p; framerate: 30000/1001
      # Frame size: 1280x720p; bitrate: 90Mbps; pixel format: yuv422p10; framerate: 24000/1001
      # Frame size: 1280x720p; bitrate: 90Mbps; pixel format: yuv422p10; framerate: 25/1
      # Frame size: 1280x720p; bitrate: 180Mbps; pixel format: yuv422p10; framerate: 50/1
      # Frame size: 1280x720p; bitrate: 220Mbps; pixel format: yuv422p10; framerate: 60000/1001
      # Frame size: 1280x720p; bitrate: 90Mbps; pixel format: yuv422p; framerate: 24000/1001
      # Frame size: 1280x720p; bitrate: 90Mbps; pixel format: yuv422p; framerate: 25/1
      # Frame size: 1280x720p; bitrate: 110Mbps; pixel format: yuv422p; framerate: 30000/1001
      # Frame size: 1280x720p; bitrate: 180Mbps; pixel format: yuv422p; framerate: 50/1
      # Frame size: 1280x720p; bitrate: 220Mbps; pixel format: yuv422p; framerate: 60000/1001
      # Frame size: 1280x720p; bitrate: 60Mbps; pixel format: yuv422p; framerate: 24000/1001
      # Frame size: 1280x720p; bitrate: 60Mbps; pixel format: yuv422p; framerate: 25/1
      # Frame size: 1280x720p; bitrate: 75Mbps; pixel format: yuv422p; framerate: 30000/1001
      # Frame size: 1280x720p; bitrate: 120Mbps; pixel format: yuv422p; framerate: 50/1
      # Frame size: 1280x720p; bitrate: 145Mbps; pixel format: yuv422p; framerate: 60000/1001
      # Frame size: 1920x1080p; bitrate: 36Mbps; pixel format: yuv422p; framerate: 24000/1001
      # Frame size: 1920x1080p; bitrate: 36Mbps; pixel format: yuv422p; framerate: 25/1
      # Frame size: 1920x1080p; bitrate: 45Mbps; pixel format: yuv422p; framerate: 30000/1001
      # Frame size: 1920x1080p; bitrate: 75Mbps; pixel format: yuv422p; framerate: 50/1
      # Frame size: 1920x1080p; bitrate: 90Mbps; pixel format: yuv422p; framerate: 60000/1001
      %W[-vcodec dnxhd -vb 60M]
    else
      raise "No settings available for codec #{opts[:codec].inspect}"
    end

    copts += %W[
      -acodec pcm_s16le
      -af bandreject=frequency=60:width_type=q:width=1.0
    ] if opts[:audio]

    exec 'ffmpeg', *copts, file
  end

  def run arguments = []
    args = parser.parse arguments
    args = ['.'] if args.empty?
    abort parser.help if args.size > 1

    file = args.first
    if File.directory? file
      file = File.join file, timestamp + (options.codec == 'dnxhd' ? '.mov' : '.mkv')
    end

    geometry = options.window ? get_window_geometry(options.window_id)
                              : (options.geometry || current_screen_geometry)

    countdown options.delay if options.delay

    record file, geometry,
      :codec => options.codec,
      :rate => options.rate,
      :display => current_display,
      :audio => options.audio
  end
end

$0 = File.basename(__FILE__) and Screencast.new.run ARGV if $0 == __FILE__
