#!/usr/bin/zsh -f
#
# Shorten path according to hashed dir list ('hash -d' in Zsh),
# maintained in ~/.dotfiles/oh-my-zsh/lib/hash_dirs.
# This also replaces $HOME with ~.
#
# This is used from vimrc.

# Plain sh would be ~4x faster on startup, but with cat/sed etc similar slow/fast,
# and needs a cache file.
#!/bin/sh

# Self-tests: run with '--test'. {{{
tests() {
  hash -d df=~/.dotfiles

  set -x -e
  cd ~
  [[ $(shorten_path .dotfiles/vimrc) == '~df/vimrc' ]]

  cd .dotfiles
  [[ $(shorten_path ~/.dotfiles/vimrc) == 'vimrc' ]]
  [[ $(shorten_path vimrc) == 'vimrc' ]]
  [[ $(shorten_path ../.dotfiles/vimrc) == 'vimrc' ]]

  [[ $(shorten_path ~/.dotfiles/foo/bar) == 'foo/bar' ]]
  [[ $(shorten_path foo/bar) == 'foo/bar' ]]
  [[ $(shorten_path ../.dotfiles/foo/bar) == 'foo/bar' ]]

  # With "base" dir.
  cd ~
  [[ $(shorten_path .dotfiles/vimrc $PWD) == '~df/vimrc' ]]
  [[ $(shorten_path vimrc .dotfiles) == 'vimrc' ]]
  [[ $(shorten_path ~/.dotfiles/vimrc /) == '~df/vimrc' ]]

  cd .dotfiles
  [[ $(shorten_path ../.vimrc) == '../.vimrc' ]]
  [[ $(shorten_path ../non-existent) == '../non-existent' ]]

  set +x
  time ( for i in {1..200}; do shorten_path foo; done )
}
if [ x$1 = 'x--test' ]; then
  tests
  return
fi
# }}}

if [ -z "$1" ]; then
  echo "Argument (path) required." >&2
  exit 1
fi

path="$1"
if [ -n "$2" ]; then
  cd "$2"
fi

abs_path=${path:a}
# Keep relative dirs, which are not going back to below base/$PWD.
if [[ $path = ../* ]] && [[ $abs_path != $PWD/* ]]; then
  printf $path
  return
fi

pwd_short=${(D)PWD}/
path_short=${(D)abs_path}
printf ${path_short#$pwd_short}
exit
