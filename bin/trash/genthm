#! /usr/bin/python
#
# Color Scheme Generator
# baskerville at lavabit dot com
#

import sys
import re
from os import chmod
from math import floor
from getopt import getopt
from os.path import basename
from colormath.color_objects import LCHabColor, RGBColor
from jinja2 import Template

FIRST_EMPTY_SLOT = 16
NUM_MONOTONES = 8
COLORS_START = FIRST_EMPTY_SLOT + NUM_MONOTONES
NUM_COLORS = 256 - FIRST_EMPTY_SLOT - NUM_MONOTONES
HUE_GRAIN = 360 / NUM_COLORS
MONOTONES_SLOTS = range(FIRST_EMPTY_SLOT, COLORS_START)
CANONICAL_HUES = [30 * i for i in range(12)]
STANDARD_POSITIONS = [1, 3, 2, 6, 4, 5]
STANDARD_LABELS = ['PNK', 'RED', 'YEL', 'GRN', 'CYN', 'BLU', 'MAG']
LIGHT_BACKGROUND = '#FAF0E6'
DARK_BACKGROUND = '#32312E'
SMALL_JUMP = 3
NUM_VARIATIONS = 4
fgbg_contrast = 16
is_bg_dark = False
translate_to_index = False
translate_to_hex = False
translate_to_rgb = False
make_variations = False
scheme_name = 'colors'
redef_file = None

def term_rgb(hex_color):
    cpts = re.match('#(..)(..)(..)', hex_color).groups()
    return 'rgb:%s/%s/%s' % cpts

def toggle_buffer():
    global redef_file
    print("printf '\\033[?47t'", file = redef_file) 

def erase_buffer():
    global redef_file
    print("printf '\\033[2J'", file = redef_file) 

def term_cmd(code, param):
    global redef_file
    print("printf '\\033]%i;%s\\007'" % (code, param), file = redef_file) 

def prop_cmd(code, hex_color):
    param = term_rgb(hex_color)
    term_cmd(code, param)

def redef_cmd(slot, hex_color):
    term_color = term_rgb(hex_color)
    param = '%i;%s' % (slot, term_color)
    term_cmd(4, param)

def approx_hue(h):
    factor = floor(h / HUE_GRAIN)
    return factor * HUE_GRAIN

def mid_hue(h1, h2):
    if h2 < h1:
        return floor((h1 + h2 + 360) / 2) % 360
    else:
        return floor((h1 + h2) / 2)

def scaled_rgb_str(rgb_color):
    return ' '.join(map(str, scaled_rgb(rgb_color)))

def scaled_rgb(rgb_color):
    return tuple(map(lambda x: x / 255, rgb_color.get_value_tuple()))

def hue_to_idx(h):
    factor = floor(h / HUE_GRAIN)
    return COLORS_START + factor

def idx_to_rgb(i, color_lightness, color_chroma):
    color_hue = (i - COLORS_START) * 360 / NUM_COLORS
    lch_color = LCHabColor(color_lightness, color_chroma, color_hue)
    rgb_color = lch_color.convert_to('rgb')
    return rgb_color

def idx_to_hex(i, color_lightness, color_chroma):
    rgb_color = idx_to_rgb(i, color_lightness, color_chroma)
    hex_color = rgb_color.get_rgb_hex().upper()
    return hex_color

def make_scheme(scheme_name, hex_bg, color_hues):
    # In terms of legibiliy, the CIELCH lightness
    # difference of the foreground and background
    # colors must be superior to twenty-seven units.
    #
    # Reference:
    # Silvia Zuffi, Carla Brambilla, Giordano Beretta and Paolo Scala:
    # Human Computer Interaction: Legibility and Contrast (2007)
    global redef_file, fgbg_contrast, translate_to_index, translate_to_hex, translate_to_rgb
    scheme_kind = 'dark'
    small_jump = SMALL_JUMP
    bg_fg_gap = fgbg_contrast * small_jump
    fg_cl_L = 100
    bg_fl_L = 100 - fg_cl_L
    dark_chroma = 11 * small_jump
    light_chroma = 21 * small_jump
    color_chroma = dark_chroma

    rgb_bg = RGBColor()
    rgb_bg.set_from_rgb_hex(hex_bg)
    lch_bg = rgb_bg.convert_to('lchab')

    # the foreground's hue is the complementary
    # of the backgound's hue
    bg_h = lch_bg.lch_h
    fg_h = (bg_h + 180) % 360

    fg_C = 2 * small_jump

    if len(color_hues) == 0:
        color_hues = sorted([(bg_h + 30 * i) % 360 for i in range(12)])
        color_hues = tuple(map(approx_hue, color_hues))
        if color_hues[0] > 15:
            color_hues = color_hues[-1:] + color_hues[:-1]

    standard_hues = color_hues[1::2]

    bg_L = lch_bg.lch_l
    bg_C = lch_bg.lch_c

    # light background?
    if bg_L > 50:
        scheme_kind = 'light'
        bg_fg_gap = -bg_fg_gap
        small_jump = -small_jump
        fg_cl_L = 100 - fg_cl_L
        bg_fl_L = 100 - bg_fl_L
        color_chroma = light_chroma

    fg_L = bg_L + bg_fg_gap
    fg_cm_L = fg_L - 5 * small_jump
    fg_hl_L = fg_L + 2 * small_jump
    bg_pt_L = bg_L - 3 * small_jump
    bg_dp_L = bg_L - small_jump
    bg_bp_L = bg_L + 2 * small_jump
    bg_sb_L = bg_L + 5 * small_jump

    lch_bg_fl = LCHabColor(bg_fl_L, bg_C, bg_h)
    lch_bg_pt = LCHabColor(bg_pt_L, bg_C, bg_h)
    lch_bg_dp = LCHabColor(bg_dp_L, bg_C, bg_h)
    lch_bg_bp = LCHabColor(bg_bp_L, bg_C, bg_h)
    lch_bg_sb = LCHabColor(bg_sb_L, bg_C, bg_h)
    lch_fg_cm = LCHabColor(fg_cm_L, fg_C, fg_h)
    lch_fg = LCHabColor(fg_L, fg_C, fg_h)
    lch_fg_hl = LCHabColor(fg_hl_L, fg_C, fg_h)
    lch_fg_cl = LCHabColor(fg_cl_L, fg_C, fg_h)

    rgb_bg_fl = lch_bg_fl.convert_to('rgb')
    rgb_bg_pt = lch_bg_pt.convert_to('rgb')
    rgb_bg_dp = lch_bg_dp.convert_to('rgb')
    rgb_bg_bp = lch_bg_bp.convert_to('rgb')
    rgb_bg_sb = lch_bg_sb.convert_to('rgb')
    rgb_fg_cm = lch_fg_cm.convert_to('rgb')
    rgb_fg = lch_fg.convert_to('rgb')
    rgb_fg_hl = lch_fg_hl.convert_to('rgb')
    rgb_fg_cl = lch_fg_cl.convert_to('rgb')

    hex_bg_fl = rgb_bg_fl.get_rgb_hex().upper()
    hex_bg_pt = rgb_bg_pt.get_rgb_hex().upper()
    hex_bg_dp = rgb_bg_dp.get_rgb_hex().upper()
    hex_bg_bp = rgb_bg_bp.get_rgb_hex().upper()
    hex_bg_sb = rgb_bg_sb.get_rgb_hex().upper()
    hex_fg_cm = rgb_fg_cm.get_rgb_hex().upper()
    hex_fg = rgb_fg.get_rgb_hex().upper()
    hex_fg_hl = rgb_fg_hl.get_rgb_hex().upper()
    hex_fg_cl = rgb_fg_cl.get_rgb_hex().upper()

    monotones = (hex_bg_fl, hex_bg_dp, hex_bg, hex_bg_bp, hex_fg_cm, hex_fg, hex_fg_hl, hex_fg_cl)

    # The color names are those given in the
    # "216-Color Webmaster's Palette" by VisiBone:
    # http://www.visibone.com/color/poster4x.html
    (pink_h, red_h, orange_h, yellow_h, spring_h, green_h, teal_h, cyan_h, azure_h, blue_h, violet_h, magenta_h) = color_hues
    (pink_i, red_i, orange_i, yellow_i, spring_i, green_i, teal_i, cyan_i, azure_i, blue_i, violet_i, magenta_i) = tuple(map(hue_to_idx, color_hues))

    idx_color_set = {
    'scheme_name':  scheme_name,
    'bg_floor':  16,
    'bg_dip':  17,
    'background':  18,
    'bg_bump':  19,
    'fg_comment':  20,
    'foreground':  21,
    'fg_highlight':  22,
    'fg_ceiling':  23,
    'red':  red_i,
    'yellow':  yellow_i,
    'green':  green_i,
    'cyan':  cyan_i,
    'blue':  blue_i,
    'magenta':  magenta_i,
    'orange':  orange_i,
    'spring':  spring_i,
    'teal':  teal_i,
    'azure':  azure_i,
    'violet':  violet_i,
    'pink':  pink_i
    }

    hex_color_set = {
    'scheme_name':  scheme_name,
    'bg_floor':  hex_bg_fl,
    'bg_pit':  hex_bg_pt,
    'bg_dip':  hex_bg_dp,
    'background':  hex_bg,
    'bg_bump':  hex_bg_bp,
    'bg_springboard':  hex_bg_sb,
    'fg_comment':  hex_fg_cm,
    'foreground':  hex_fg,
    'fg_highlight':  hex_fg_hl,
    'fg_ceiling':  hex_fg_cl,
    'red':  idx_to_hex(red_i, fg_L, color_chroma),
    'yellow':  idx_to_hex(yellow_i, fg_L, color_chroma),
    'green':  idx_to_hex(green_i, fg_L, color_chroma),
    'cyan':  idx_to_hex(cyan_i, fg_L, color_chroma),
    'blue':  idx_to_hex(blue_i, fg_L, color_chroma),
    'magenta':  idx_to_hex(magenta_i, fg_L, color_chroma),
    'orange':  idx_to_hex(orange_i, fg_L, color_chroma),
    'spring':  idx_to_hex(spring_i, fg_L, color_chroma),
    'teal':  idx_to_hex(teal_i, fg_L, color_chroma),
    'azure':  idx_to_hex(azure_i, fg_L, color_chroma),
    'violet':  idx_to_hex(violet_i, fg_L, color_chroma),
    'pink':  idx_to_hex(pink_i, fg_L, color_chroma),
    'red_comment':  idx_to_hex(red_i, fg_cm_L, color_chroma),
    'yellow_comment':  idx_to_hex(yellow_i, fg_cm_L, color_chroma),
    'green_comment':  idx_to_hex(green_i, fg_cm_L, color_chroma),
    'cyan_comment':  idx_to_hex(cyan_i, fg_cm_L, color_chroma),
    'blue_comment':  idx_to_hex(blue_i, fg_cm_L, color_chroma),
    'magenta_comment':  idx_to_hex(magenta_i, fg_cm_L, color_chroma),
    'orange_comment':  idx_to_hex(orange_i, fg_cm_L, color_chroma),
    'spring_comment':  idx_to_hex(spring_i, fg_cm_L, color_chroma),
    'teal_comment':  idx_to_hex(teal_i, fg_cm_L, color_chroma),
    'azure_comment':  idx_to_hex(azure_i, fg_cm_L, color_chroma),
    'violet_comment':  idx_to_hex(violet_i, fg_cm_L, color_chroma),
    'pink_comment':  idx_to_hex(pink_i, fg_cm_L, color_chroma)
    }

    rgb_color_set = {
    'scheme_name':  scheme_name,
    'bg_floor':  scaled_rgb_str(rgb_bg_fl),
    'bg_pit':  scaled_rgb_str(rgb_bg_pt),
    'bg_dip':  scaled_rgb_str(rgb_bg_dp),
    'background':  scaled_rgb_str(rgb_bg),
    'bg_bump':  scaled_rgb_str(rgb_bg_bp),
    'bg_springboard':  scaled_rgb_str(rgb_bg_sb),
    'fg_comment':  scaled_rgb_str(rgb_fg_cm),
    'foreground':  scaled_rgb_str(rgb_fg),
    'fg_highlight':  scaled_rgb_str(rgb_fg_hl),
    'fg_ceiling':  scaled_rgb_str(rgb_fg_cl),
    'red':  scaled_rgb_str(idx_to_rgb(red_i, fg_L, color_chroma)),
    'yellow':  scaled_rgb_str(idx_to_rgb(yellow_i, fg_L, color_chroma)),
    'green':  scaled_rgb_str(idx_to_rgb(green_i, fg_L, color_chroma)),
    'cyan':  scaled_rgb_str(idx_to_rgb(cyan_i, fg_L, color_chroma)),
    'blue':  scaled_rgb_str(idx_to_rgb(blue_i, fg_L, color_chroma)),
    'magenta':  scaled_rgb_str(idx_to_rgb(magenta_i, fg_L, color_chroma)),
    'orange':  scaled_rgb_str(idx_to_rgb(orange_i, fg_L, color_chroma)),
    'spring':  scaled_rgb_str(idx_to_rgb(spring_i, fg_L, color_chroma)),
    'teal':  scaled_rgb_str(idx_to_rgb(teal_i, fg_L, color_chroma)),
    'azure':  scaled_rgb_str(idx_to_rgb(azure_i, fg_L, color_chroma)),
    'violet':  scaled_rgb_str(idx_to_rgb(violet_i, fg_L, color_chroma)),
    'pink':  scaled_rgb_str(idx_to_rgb(pink_i, fg_L, color_chroma)),
    'red_comment':  scaled_rgb_str(idx_to_rgb(red_i, fg_cm_L, color_chroma)),
    'yellow_comment':  scaled_rgb_str(idx_to_rgb(yellow_i, fg_cm_L, color_chroma)),
    'green_comment':  scaled_rgb_str(idx_to_rgb(green_i, fg_cm_L, color_chroma)),
    'cyan_comment':  scaled_rgb_str(idx_to_rgb(cyan_i, fg_cm_L, color_chroma)),
    'blue_comment':  scaled_rgb_str(idx_to_rgb(blue_i, fg_cm_L, color_chroma)),
    'magenta_comment':  scaled_rgb_str(idx_to_rgb(magenta_i, fg_cm_L, color_chroma)),
    'orange_comment':  scaled_rgb_str(idx_to_rgb(orange_i, fg_cm_L, color_chroma)),
    'spring_comment':  scaled_rgb_str(idx_to_rgb(spring_i, fg_cm_L, color_chroma)),
    'teal_comment':  scaled_rgb_str(idx_to_rgb(teal_i, fg_cm_L, color_chroma)),
    'azure_comment':  scaled_rgb_str(idx_to_rgb(azure_i, fg_cm_L, color_chroma)),
    'violet_comment':  scaled_rgb_str(idx_to_rgb(violet_i, fg_cm_L, color_chroma)),
    'pink_comment':  scaled_rgb_str(idx_to_rgb(pink_i, fg_cm_L, color_chroma))
    }

    if translate_to_index or translate_to_hex or translate_to_rgb:
        color_set = hex_color_set
        if translate_to_index:
            color_set = idx_color_set
        if translate_to_rgb:
            color_set = rgb_color_set
        contents = sys.stdin.read()
        t = Template(contents)
        print(t.render(color_set))
        exit()

    xres_name = '%s-%s' % (scheme_name, scheme_kind)
    redef_name = 'redef-%s-%s' % (scheme_name, scheme_kind)
    xres_file = open(xres_name, 'w')
    redef_file = open(redef_name, 'w')

    print('''#define t_bg_floor     %s
#define t_bg_dip       %s
#define t_background   %s
#define t_bg_bump      %s
#define t_fg_comment   %s
#define t_foreground   %s
#define t_fg_highlight %s
#define t_fg_ceiling   %s''' % monotones, file = xres_file)

    print(file = xres_file)

    print('''*background: t_background
*foreground: t_foreground

*colorBD: t_fg_highlight
*colorIT: t_fg_highlight
*colorUL: t_fg_highlight

*cursorColor: {cyan}

! BLK
*color0: t_bg_bump
*color8: t_fg_comment

! WHT
*color7: t_fg_highlight
*color15: t_fg_ceiling'''.format(**hex_color_set), file = xres_file)

    toggle_buffer()
    erase_buffer()

    prop_cmd(11, hex_bg)
    prop_cmd(708, hex_bg)
    prop_cmd(10, hex_fg)

    prop_cmd(706, hex_fg_hl)
    prop_cmd(704, hex_fg_hl)
    prop_cmd(707, hex_fg_hl)

    # cursor color
    prop_cmd(12, idx_to_hex(cyan_i, fg_L, color_chroma))

    redef_cmd(0, hex_bg_bp)
    redef_cmd(8, hex_fg_cm)

    redef_cmd(7, hex_fg_hl)
    redef_cmd(15, hex_fg_cl)

    print(file = xres_file)

    for position, color_hue, label in zip(STANDARD_POSITIONS, standard_hues, STANDARD_LABELS):
        lch_color_hl = LCHabColor(fg_hl_L, color_chroma, color_hue)
        lch_color_cm = LCHabColor(fg_cm_L, color_chroma, color_hue)
        rgb_color_hl = lch_color_hl.convert_to('rgb')
        rgb_color_cm = lch_color_cm.convert_to('rgb')
        hex_color_hl = rgb_color_hl.get_rgb_hex().upper()
        hex_color_cm = rgb_color_cm.get_rgb_hex().upper()
        slot_cm = position
        slot_hl = position + 8
        redef_cmd(slot_cm, hex_color_cm)
        redef_cmd(slot_hl, hex_color_hl)
        print('! %s' % label, file = xres_file)
        print('*color%s: %s' % (slot_cm, hex_color_cm), file = xres_file)
        print('*color%s: %s' % (slot_hl, hex_color_hl), file = xres_file)
        print(file = xres_file)

    print('''*color%s: t_bg_floor
*color%s: t_bg_dip
*color%s: t_background
*color%s: t_bg_bump
*color%s: t_fg_comment
*color%s: t_foreground
*color%s: t_fg_highlight
*color%s: t_fg_ceiling''' % tuple(MONOTONES_SLOTS), file = xres_file)

    for slot, hex_color in zip(MONOTONES_SLOTS, monotones):
        redef_cmd(slot, hex_color)

    print(file = xres_file)

    for slot in range(COLORS_START, COLORS_START + NUM_COLORS):
        hex_color = idx_to_hex(slot, fg_L, color_chroma)
        redef_cmd(slot, hex_color)
        print('*color%s: %s' % (slot, hex_color), file = xres_file)

    print(file = xres_file)
    print('! %s: set ft=xdefaults:' % 'vim', file = xres_file)

    toggle_buffer()

    xres_file.close()
    redef_file.close()

    chmod(redef_name, 0o744)

def shift_lightness(scm, delta):
    if delta == 0:
        return scm
    (scheme_name, hex_bg) = scm
    delta_prefix = 'p'
    if delta < 0:
        delta_prefix = 'm'
    shifted_scheme_name = '%s_%s%i' % (scheme_name, delta_prefix, abs(delta))
    rgb_bg = RGBColor()
    rgb_bg.set_from_rgb_hex(hex_bg)
    lch_bg = rgb_bg.convert_to('lchab')
    (L, C, H) = lch_bg.get_value_tuple()
    shifted_lch_bg = LCHabColor(L + delta, C, H)
    shifted_hex_bg = shifted_lch_bg.convert_to('rgb').get_rgb_hex()
    return (shifted_scheme_name, shifted_hex_bg)

def usage():
    global fgbg_contrast
    print('''
SYNOPSIS
    {} [OPTIONS] [SCHEME_NAME]

OPTIONS
    -h, --help
        Show this message.

    -l, --light
        Use the predefined light background ({}).

    -d, --dark
        Use the predefined dark background ({}).

    -t, --translate-to-hex
        Translate color tags read from stdin to hex.

    -T, --translate-to-index
        Translate color tags read from stdin to indexes.

    -r, --translate-to-rgb
        Translate color tags read from stdin to rgb.

    -v, --make-variations
        Produce multiple versions of the color scheme by shifting
        the background lightness.

    -a, --adaptative-hues
        Deduce color hues from the background color's hue.

    -b, --background-color HEX_BG
        Use the specified hex color as background color.

    -c, --fgbg-contrast FGBG_CONTRAST
        Define the 'strength' of the contrast between the foreground
        and the background color (default value: {}).

    -u, --color-hues LIST_OF_HUES
        Define the color hues from the given comma separated list LIST_OF_HUES.
        The expected colors hues are: pink, red, orange, yellow, etc.
'''.format(basename(sys.argv[0]), LIGHT_BACKGROUND, DARK_BACKGROUND, fgbg_contrast))
    sys.exit(1)

def main():
    global scheme_name, fgbg_contrast, is_bg_dark, translate_to_index, translate_to_hex, translate_to_rgb, make_variations
    opts, args = getopt(sys.argv[1:], 'hldtTrvab:c:u:', ['help', 'light', 'dark', 'translate-to-index', 'translate-to-hex', 'translate-to-rgb', 'make-variations', 'adaptative-hues', 'background-color=', 'fgbg-contrast=', 'color-hues=', ])

    hex_bg = None
    color_hues = CANONICAL_HUES

    for opt, val in opts:
        if opt in ('-h', '--help'):
            usage()
        elif opt in ('-b', '--background-color'):
            hex_bg = val.upper()
        elif opt in ('-d', '--dark'):
            is_bg_dark = True
        elif opt in ('-l', '--light'):
            is_bg_dark = False
        elif opt in ('-d', '--dark'):
            is_bg_dark = True
        elif opt in ('-T', '--translate-to-index'):
            translate_to_index = True
        elif opt in ('-t', '--translate-to-hex'):
            translate_to_hex = True
        elif opt in ('-r', '--translate-to-rgb'):
            translate_to_rgb = True
        elif opt in ('-v', '--make-variations'):
            make_variations = True
        elif opt in ('-a', '--adaptative-hues'):
            color_hues = []
        elif opt in ('-c', '--fgbg-constrast'):
            fgbg_contrast = float(val)
        elif opt in ('-u', '--color-hues'):
            color_hues = map(float, val.split(','))

    if hex_bg == None:
        if is_bg_dark:
            hex_bg = DARK_BACKGROUND
        else:
            hex_bg = LIGHT_BACKGROUND

    if len(args) > 0:
        scheme_name = args[0]

    color_hues = tuple(map(approx_hue, color_hues))

    if make_variations:
        multiple_schemes = [shift_lightness((scheme_name, hex_bg), SMALL_JUMP * delta) for delta in range(-NUM_VARIATIONS + 1, NUM_VARIATIONS)]
        for scm in multiple_schemes:
            (scheme_name, hex_bg) = scm
            make_scheme(scheme_name, hex_bg, color_hues)
    else:
        make_scheme(scheme_name, hex_bg, color_hues)

if __name__ == '__main__':
    main()
