#!/bin/zsh

# (1) add pipes support
# (2) fix rofi
# (3) delete functions
# (4) separate files (???)
# (5) fix password store or whatever

tmp_home_="$(readlink -f ~/tmp)"

clipped_fifo_="${tmp_home_}/pass_clipped_fifo"
pass_picked_="${tmp_home_}/pass_picked"
rofi_pass_fifo_="${tmp_home_}/pass_rofi_fifo"
rofi_picked_="${tmp_home_}/pass_rofi_picked"

# mkfifo ${clipped_fifo_} ${pass_picked_} ${rofi_pass_fifo_} ${tmp_home_}/pass_rofi_picked

[[ -e ${clipped_fifo_} ]] && touch ${clipped_fifo_}
[[ -e ${pass_picked_} ]] && touch ${pass_picked_}
[[ -e ${rofi_pass_fifo_} ]] && touch ${rofi_pass_fifo_}
[[ -e ${rofi_picked_} ]] && touch ${rofi_picked_}

# --=[ Initialize pass ]=--
function pass_init_(){
    mail_="$(gpg -dq ~/.mail_.gpg)"
    passwd_store_="${HOME}/.password-store"

    rofi_pass_="${HOME}/bin/scripts/rofi_pass.sh"

    font_sz_="18"
    font="Pragmata Pro for Powerline bold ${font_sz_}"
    mon_width_=$(xrandr -q |awk '/Screen/{print $8}')
    gap_="70"

    rofi_prompt_='ps :: '
    rofi_="$(echo \
            'rofi -show pass:"${rofi_pass_}" \
            -font "${font}" -yoffset -22 -location 6 \
            -width $[mon_width_ - gap_] \
            -lines 10 -columns 4 \
            -p '${rofi_prompt_}' >/dev/null 2>&1' | sed 's/ \+/ /gp')"
}

pass_init_

function clip_pass() {
    pass_output="$(pass "$1")"
    if [[ -z "${pass_output}" ]]; then
        kill -TERM -$(ps x -o "%p %r %y %x %c " \
                    | grep _pass \
                    | awk '{print $2}')
        exit
    fi

    gpg -e -r "${mail_}" -o "${clipped_fifo_}" --no-tty --yes <<< "${pass_output}"
    builtin printf "$1" > "${pass_picked_}"
}

function search_pass() {
    win_name="$1"
    pass_entry=$(find "${passwd_store_}" -name "*${win_name}*.gpg" \
                | awk -F "${passwd_store_}/" '{print $2}' \
                | rev \
                | cut -d "." -f 1 --complement \
                | rev)
    [[ -n "$3" ]] && pass_entry="$3"

    if [[ -z ${pass_entry} ]]; then
        find "${passwd_store_}" -name "*.gpg" \
            | awk -F "${passwd_store_}/" '{print $2}' \
            | rev \
            | cut -d "." -f 1 --complement \
            | rev > "${rofi_pass_fifo_}"
        eval ${rofi_}
    elif [[ $(grep -c . <<< "${pass_entry}") > 1 ]]; then
        builtin printf "${pass_entry}\n" > "${rofi_pass_fifo_}"
        eval "${rofi_}"
    else
        clip_pass "${pass_entry}"
    fi
}


function get_pass_(){
    pass_=$(cat "${clipped_fifo_}" \
        | gpg -d -r "${mail_}" --no-tty 2>/dev/null \
        | head -n1)
}

function copy_pass() {
    (
        wait_
        get_pass_
        echo ${pass_} | xclip
        notify-no-icon "${unlocked_} copied [$(cat ${pass_picked_})] to clipboard"
    ) &
    get_pass
}

function get_pass(){
    win_name="$(xdotool getwindowname $(xdotool getwindowfocus) \
        | awk -F ' ' '{print tolower($1)}')"
    search_pass "${win_name}"
}

function icon_() { export "$1"="%{F${color_icon}}$2%{F${color_fg}}" }
function wait_() { inotifywait -e close_write "${clipped_fifo_}" >/dev/null 2>&1 }
 
icon_ vol_icon_      "\uf028"
icon_ mute_icon_     "\uf026x"
icon_ keyboard_icon_ "\uf11c"
icon_ clock_icon_    "\uf017"
icon_ calendar_icon_ "\uf073"
icon_ redshift_icon_ "\uf042"
icon_ tv_icon_       "\uf26c"
icon_ vpn_icon_      "\uf0ac"
icon_ unlocked_      "\uf084\uf13e"


for arg in "$1"; do
    case ${arg} in
        copy) 
            shift; 
            [[ $# > 0 ]] && { copy_pass "$@" && exit 0 }
            { copy_pass && exit 0 }
            ;;
        get) 
            shift; 
            [[ $# > 0 ]] && { get_pass "$@" && exit 0 }
            { get_pass && exit 0 }
            ;;
        search) 
            shift; 
            [[ $# > 0 ]] && { search_pass "$@" && exit 0 }
            { search_pass && exit 0 }
            ;;
        paste) 
            shift; 
            [[ $# > 0 ]] && { paste_pass "$@" && exit 0 }
            { paste_pass && exit 0 }
            ;;
        clip) 
            shift; 
            [[ $# > 0 ]] && { clip_pass "$@" && exit 0 }
            { clip_pass && exit 0 }
            ;;
        puser) 
            shift; 
            [[ $# > 0 ]] && { paste_user "$@" && exit 0 }
            { paste_user && exit 0 }
            exit 0
            ;;
        puserpass) 
            shift; 
            [[ $# > 0 ]] && { paste_user_pass "$@" && exit 0 }
            { paste_user_pass && exit 0 }
            ;;
        search) 
            shift; 
            [[ $# > 0 ]] && { search_pass "$@" && exit 0 }
            { search_pass && exit 0 }
            ;;
        get) 
            shift; 
            [[ $# > 0 ]] && { get_pass "$@" && exit 0 }
            { get_pass && exit 0 }
            ;;
        *) exit 0
            ;;
    esac
done


function paste_pass() {
    (   
        wait_ && \
        get_pass_
        xdotool type "${pass}"
        notify-no-icon "${unlocked_} pasted [$(< ${pass_picked_})]" 
    ) &
    get_pass
}

function paste_user() {
    (
        wait_ && \
        user_pass=$(< "${clipped_fifo_}" | gpg -d -r "${mail_}" --no-tty 2>/dev/null)
        user=$(grep "user" <<< "${user_pass}" | awk -F ":" '{print $2}' | awk '{print $1}')
        xdotool type "${user}"
        notify-no-icon "${unlocked_} pasted [$(< ${pass_picked_})]"
    ) &
    get_pass
}

function paste_user_pass() {
    (
        wait_ && \
        user_pass=$(< "${clipped_fifo_}" | gpg -d -r "${mail_}" --no-tty 2>/dev/null)
        pass=$(head -n1 <<< "${user_pass}")
        user=$(builtin printf "${user_pass}\n" \
            | grep "user" \
            | awk -F ":" '{print $2}' \
            | awk '{print $1}')
        xdotool type "${user}"
        xdotool key Tab
        sleep .1
        xdotool type "${pass}"
        notify-no-icon "${unlocked_} pasted [$(< ${pass_picked_})]"
    ) &
    get_pass
}

# rm ${clipped_fifo_} ${pass_picked_} ${rofi_pass_fifo_}
unfunction icon_
unfunction pass_init_
