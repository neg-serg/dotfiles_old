#! /bin/dash
# color chart by baskerville

test_pattern='bYd'
fill_pattern=$(printf "$test_pattern" | sed 's/./ /g')

print_color() {
    local NUM_REQ_ARGS=4
    if [ $# -lt $NUM_REQ_ARGS ]; then
        printf "print_color: not enough arguments: was expecting %b, received %b\n" $NUM_REQ_ARGS $# >& 2
        return 1
    fi
    local attribute=$1
    local foreground=$2
    local background=$3
    local pattern="$4"
    printf ' \033[%b;%bm\033[%bm  %b  \033[0m' "$attribute" "$foreground" "$background" "$pattern"
}

printf '\n'

for generic_foreground in transparent 39 30 31 32 33 34 35 36 37 transparent
do
    # use 39 $(seq 30 37) instead?
    for generic_attribute in normal bold
    do
        # if the foreground is 'transparent', there's no bold version of it:
        [ "$generic_foreground" = "transparent" -a "$generic_attribute" = "bold" ] && continue
        attribute=0
        [ "$generic_attribute" = "bold" ] && attribute=1
        for background in 40 41 42 43 44 45 46 47
        do
            foreground=$generic_foreground
            pattern=$test_pattern
            # we simulate a transparent foreground by using the fill pattern:
            if [ "$generic_foreground" = "transparent" ]; then
                foreground=39
                pattern=$fill_pattern
            fi
            print_color "$attribute" "$foreground" "$background" "$pattern"
        done
        printf '\n'
    done
done

printf '\n'

pattern=$test_pattern
background=49

for attribute in 0 1
do
    for foreground in 30 31 32 33 34 35 36 37
    do
        print_color "$attribute" "$foreground" "$background" "$pattern"
    done
    printf '\n'
done

for attribute in 1 0
do
    for foreground in 39 39 39 39 39 39 39 39
    do
        print_color "$attribute" "$foreground" "$background" "$pattern"
    done
    printf '\n'
done

printf '\n'
